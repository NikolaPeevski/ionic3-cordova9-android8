{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/image-resizer/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,6BAA6B,CAAC;AAiC3D;IAAsC,oCAAY;IAAlD;;IASA,CAAC;IARG;;OAEG;IACH,iCAAM,GAAN,UAAO,OAA4B;QAC/B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,uBAAC;AAAD,CATA,AASC,CATqC,YAAY,GASjD","file":"index.js","sourceRoot":"","sourcesContent":["import { ImageResizer } from '@ionic-native/image-resizer';\n\nexport interface ImageResizerOptions {\n    /**\n     * The URI for the image on the device to get scaled\n     */\n    uri: string;\n    /**\n     * The width of the new image\n     */\n    width: number;\n    /**\n     * The height of the new image\n     */\n    height: number;\n    /**\n     * The name of the folder the image should be put\n     * (Android only)\n     */\n    folderName?: string;\n    /**\n     *\n     * Quality given as Number for the quality of the new image\n     * (Android and iOS only)\n     */\n    quality?: number;\n    /**\n     * A custom name for the file. Default name is a timestamp\n     * (Android and Windows only)\n     */\n    fileName?: string;\n}\n\nexport class ImageResizerMock extends ImageResizer {\n    /**\n     * @returns {Promise<any>}\n     */\n    resize(options: ImageResizerOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n}\n"]}