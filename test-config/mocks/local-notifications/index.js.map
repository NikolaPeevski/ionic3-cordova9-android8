{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/local-notifications/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { LocalNotifications } from '@ionic-native/local-notifications';\n\nexport interface ILocalNotification {\n    /**\n     * A unique identifier required to clear, cancel, update or retrieve the local notification in the future\n     * Default: 0\n     */\n    id?: number;\n    /**\n     * First row of the notification\n     * Default: Empty string (iOS) or the app name (Android)\n     */\n    title?: string;\n    /**\n     * Second row of the notification\n     * Default: Empty string\n     */\n    text?: string;\n    /**\n     * The interval at which to reschedule the local notification. That can be a value of second, minute, hour, day, week, month or year\n     * Default: 0 (which means that the system triggers the local notification once)\n     */\n    every?: string;\n    /**\n     * The date and time when the system should deliver the local notification. If the specified value is nil or is a date in the past, the local notification is delivered immediately.\n     * Default: now ~ new Date()\n     */\n    at?: any;\n    firstAt?: any;\n    /**\n     * The number currently set as the badge of the app icon in Springboard (iOS) or at the right-hand side of the local notification (Android)\n     * Default: 0 (which means don't show a number)\n     */\n    badge?: number;\n    /**\n     * Uri of the file containing the sound to play when an alert is displayed\n     * Default: res://platform_default\n     */\n    sound?: string;\n    /**\n     * Arbitrary data, objects will be encoded to JSON string\n     * Default: null\n     */\n    data?: any;\n    /**\n     * ANDROID ONLY\n     * Uri of the icon that is shown in the ticker and notification\n     * Default: res://icon\n     */\n    icon?: string;\n    /**\n     * ANDROID ONLY\n     * Uri of the resource (only res://) to use in the notification layouts. Different classes of devices may return different sizes\n     * Default: res://ic_popup_reminder\n     */\n    smallIcon?: string;\n    /**\n    * ANDROID ONLY\n    * RGB value for the background color of the smallIcon.\n    * Default: Androids COLOR_DEFAULT, which will vary based on Android version.\n    */\n    color?: string;\n    /**\n     * ANDROID ONLY\n     * Ongoing notifications differ from regular notifications in the following ways:\n     * - They are sorted above the regular notifications in the notification panel\n     * - They do not have an 'X' close button, and are not affected by the \"Clear all\" button\n     * Default: false\n     */\n    ongoing?: boolean;\n    /**\n     * ANDROID ONLY\n     * ARGB value that you would like the LED on the device to blink\n     * Default: FFFFFF\n     */\n    led?: string;\n    /**\n    * Notification priority.\n    */\n    priority?: number;\n}\n\nexport class LocalNotificationsMocks extends LocalNotifications {\n    /**\n     * Schedules a single or multiple notifications\n     * @param options {Notification | Array<ILocalNotification>} optional\n     */\n    schedule(options?: ILocalNotification | Array<ILocalNotification>): void { };\n    /**\n     * Updates a previously scheduled notification. Must include the id in the options parameter.\n     * @param options {ILocalNotification} optional\n     */\n    update(options?: ILocalNotification): void { };\n    /**\n     * Clears single or multiple notifications\n     * @param notificationId {any} A single notification id, or an array of notification ids.\n     * @returns {Promise<any>} Returns a promise when the notification had been cleared\n     */\n    clear(notificationId: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Clears all notifications\n     * @returns {Promise<any>} Returns a promise when all notifications have cleared\n     */\n    clearAll(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Cancels single or multiple notifications\n     * @param notificationId {any} A single notification id, or an array of notification ids.\n     * @returns {Promise<any>} Returns a promise when the notification is canceled\n     */\n    cancel(notificationId: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Cancels all notifications\n     * @returns {Promise<any>} Returns a promise when all notifications are canceled\n     */\n    cancelAll(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Checks presence of a notification\n     * @param notificationId {number}\n     * @returns {Promise<boolean>}\n     */\n    isPresent(notificationId: number): Promise<boolean> {\n        let response: boolean;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Checks is a notification is scheduled\n     * @param notificationId {number}\n     * @returns {Promise<boolean>}\n     */\n    isScheduled(notificationId: number): Promise<boolean> {\n        let response: boolean;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Checks if a notification is triggered\n     * @param notificationId {number}\n     * @returns {Promise<boolean>}\n     */\n    isTriggered(notificationId: number): Promise<boolean> {\n        let response: boolean;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Get all the notification ids\n     * @returns {Promise<Array<number>>}\n     */\n    getAllIds(): Promise<Array<number>> {\n        let response: Array<number> = [];\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Get the ids of triggered notifications\n     * @returns {Promise<Array<number>>}\n     */\n    getTriggeredIds(): Promise<Array<number>> {\n        let response: Array<number> = [];\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Get the ids of scheduled notifications\n     * @returns {Promise<Array<number>>} Returns a promise\n     */\n    getScheduledIds(): Promise<Array<number>> {\n        let response: Array<number> = [];\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Get a notification object\n     * @param notificationId {any} The id of the notification to get\n     * @returns {Promise<ILocalNotification>}\n     */\n    get(notificationId: any): Promise<ILocalNotification> {\n        let response: ILocalNotification;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Get a scheduled notification object\n     * @param notificationId {any} The id of the notification to get\n     * @returns {Promise<ILocalNotification>}\n     */\n    getScheduled(notificationId: any): Promise<ILocalNotification> {\n        let response: ILocalNotification;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Get a triggered notification object\n     * @param notificationId The id of the notification to get\n     * @returns {Promise<ILocalNotification>}\n     */\n    getTriggered(notificationId: any): Promise<ILocalNotification> {\n        let response: ILocalNotification;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Get all notification objects\n     * @returns {Promise<Array<ILocalNotification>>}\n     */\n    getAll(): Promise<Array<ILocalNotification>> {\n        let response: Array<ILocalNotification> = [];\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Get all scheduled notification objects\n     * @returns {Promise<Array<ILocalNotification>>}\n     */\n    getAllScheduled(): Promise<Array<ILocalNotification>> {\n        let response: Array<ILocalNotification> = [];\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Get all triggered notification objects\n     * @returns {Promise<Array<ILocalNotification>>}\n     */\n    getAllTriggered(): Promise<Array<ILocalNotification>> {\n        let response: Array<ILocalNotification> = [];\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Register permission to show notifications if not already granted.\n     * @returns {Promise<boolean>}\n     */\n    registerPermission(): Promise<boolean> {\n        let response: boolean;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Informs if the app has the permission to show notifications.\n     * @returns {Promise<boolean>}\n     */\n    hasPermission(): Promise<boolean> {\n        let response: boolean;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Sets a callback for a specific event\n     * @param eventName The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall\n     * @param callback Call back function. All events return notification and state parameter. clear and clearall return state parameter only.\n     */\n    on(eventName: string, callback: any): void { };\n}\n"]}