{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/gyroscope/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AACpD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAiC7C;IAAmC,iCAAS;IAA5C;;IAwBA,CAAC;IAvBG;;;;OAIG;IACH,6BAAK,GAAL,UAAM,OAA0B;QAC5B,IAAI,QAA8B,CAAC;QACnC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,kCAAU,GAAV,UAAW,OAA0B;QACjC,IAAI,QAA8B,CAAC;QACnC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,oBAAC;AAAD,CAxBA,AAwBC,CAxBkC,SAAS,GAwB3C","file":"index.js","sourceRoot":"","sourcesContent":["import { Gyroscope } from '@ionic-native/gyroscope';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n/**\n *  @hidden\n */\nexport interface GyroscopeOrientation {\n    /**\n     *  Represent x-axis\n     */\n    x: number;\n    /**\n     *  Represent y-axis\n     */\n    y: number;\n    /**\n     *  Represent z-axis\n     */\n    z: number;\n    /**\n     *  Represent timestamp of sensor read. Default is 10000ms\n     */\n    timestamp: number;\n}\n/**\n *  @hidden\n */\nexport interface GyroscopeOptions {\n    /**\n     *  Represent how often (in milliseconds) sensor should be read.  Default is 10000 ms\n     */\n    frequency: number;\n}\n\nexport class GyroscopeMock extends Gyroscope {\n    /**\n     * Watching for gyroscope sensor changes\n     * @param {GyroscopeOptions} [options]\n     * @return {Observable<GyroscopeOrientation>} Returns an Observable that resolves GyroscopeOrientation\n     */\n    watch(options?: GyroscopeOptions): Observable<GyroscopeOrientation> {\n        let response: GyroscopeOrientation;\n        return Observable.create((observer: Observer<any>) => {\n            observer.next(response);\n            observer.complete();\n        });\n    };\n    /**\n     * Get current data from gyroscope sensor\n     * @param {GyroscopeOptions} [options]\n     * @return {Promise<GyroscopeOrientation>} Returns a promise that resolves GyroscopeOrientation\n     */\n    getCurrent(options?: GyroscopeOptions): Promise<GyroscopeOrientation> {\n        let response: GyroscopeOrientation;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n}\n"]}