{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/deeplinks/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AACpD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAoB7C;IAAoC,kCAAS;IAA7C;;IA6CA,CAAC;IA5CG;;;;;;;;;OASG;IACH,8BAAK,GAAL,UAAM,KAAU;QACZ,IAAI,QAAuB,CAAC;QAC5B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;;;;;;;;;;;;;OAmBG;IACH,+CAAsB,GAAtB,UAAuB,aAAkB,EAAE,KAAU;QACjD,IAAI,QAAuB,CAAC;QAC5B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,qBAAC;AAAD,CA7CA,AA6CC,CA7CmC,SAAS,GA6C5C","file":"index.js","sourceRoot":"","sourcesContent":["import { Deeplinks } from '@ionic-native/deeplinks';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nexport interface DeeplinkMatch {\n    /**\n     * The route info for the matched route\n     */\n    $route: any;\n    /**\n     * Any arguments passed either through route parameters or GET parameters\n     */\n    $args: any;\n    /**\n     * The deeplink object processed from the plugin, along with any\n     * any internal native data available as \"extras\" at the time\n     * the route was matched (for example, Facebook sometimes adds extra data)\n     */\n    $link: any;\n}\n\nexport class DeeplinksMocks extends Deeplinks {\n    /**\n     * Define a set of paths to match against incoming deeplinks.\n     *\n     * @param {paths} paths Define a set of paths to match against incoming deeplinks.\n     * paths takes an object of the form { 'path': data }. If a deeplink\n     * matches the path, the resulting path-data pair will be returned in the\n     * promise result which you can then use to navigate in the app as you see fit.\n     * @returns {Observable<DeeplinkMatch>} Returns an Observable that is called each time a deeplink comes through, and\n     * errors if a deeplink comes through that does not match a given path.\n     */\n    route(paths: any): Observable<DeeplinkMatch> {\n        let response: DeeplinkMatch;\n        return Observable.create((observer: Observer<any>) => {\n            observer.next(response);\n            observer.complete();\n        });\n    };\n    /**\n     *\n     * This is a convenience version of `route` that takes a reference to a NavController\n     * from Ionic, or a custom class that conforms to this protocol:\n     *\n     * NavController.push = function(View, Params){}\n     *\n     * This handler will automatically navigate when a route matches. If you need finer-grained\n     * control over the behavior of a matching deeplink, use the plain `route` method.\n     *\n     * @param {Nav} navController Define a set of paths to match against incoming deeplinks.\n     * paths takes an object of the form { 'path': data }. If a deeplink\n     * matches the path, the resulting path-data pair will be returned in the\n     * promise result which you can then use to navigate in the app as you see fit.\n     *\n     * @param {Object} paths\n     *\n     * @returns {Observable<DeeplinkMatch>} Returns an Observable that resolves each time a deeplink comes through, and\n     * errors if a deeplink comes through that does not match a given path.\n     */\n    routeWithNavController(navController: any, paths: any): Observable<DeeplinkMatch> {\n        let response: DeeplinkMatch;\n        return Observable.create((observer: Observer<any>) => {\n            observer.next(response);\n            observer.complete();\n        });\n    };\n}\n"]}