{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/firebase/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Firebase } from '@ionic-native/firebase';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nexport class FirebaseMock extends Firebase {\n    /**\n     * Get the device token\n     * @return {Promise<any>}\n     */\n    getToken(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Get notified when a token is refreshed\n     * @return {Observable<any>}\n     */\n    onTokenRefresh(): Observable<any> {\n        return Observable.create((observer: Observer<any>) => {\n            observer.next('');\n            observer.complete();\n        });\n    };\n    /**\n     * Get notified when the user opens a notification\n     * @return {Observable<any>}\n     */\n    onNotificationOpen(): Observable<any> {\n        return Observable.create((observer: Observer<any>) => {\n            observer.next('');\n            observer.complete();\n        });\n    };\n    /**\n     * Grant permission to receive push notifications\n     * @return {Promise<any>}\n     */\n    grantPermission(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   * Check permission to receive push notifications\n   * @return {Promise<any>}\n   */\n    hasPermission(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Set icon badge number. Set to 0 to clear the badge.\n     * @param badgeNumber {number}\n     * @return {Promise<any>}\n     */\n    setBadgeNumber(badgeNumber: number): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Get icon badge number\n     * @return {Promise<any>}\n     */\n    getBadgeNumber(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Subscribe to a topic\n     * @param topic {string}\n     * @return {Promise<any>}\n     */\n    subscribe(topic: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Unsubscribe from a topic\n     * @param topic {string}\n     * @return {Promise<any>}\n     */\n    unsubscribe(topic: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Log an event using Analytics\n     * @param type {string}\n     * @param data {Object}\n     * @return {Promise<any>}\n     */\n    logEvent(type: string, data: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Log an Error using FirebaseCrash\n     * @param message {string}\n     * @return {Promise<any>}\n     */\n    logError(message: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Set the name of the current screen in Analytics\n     * @param name {string} Screen name\n     * @return {Promise<any>}\n     */\n    setScreenName(name: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Set a user id for use in Analytics\n     * @param userId {string}\n     * @return {Promise<any>}\n     */\n    setUserId(userId: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Set a user property for use in Analytics\n     * @param name {string}\n     * @param value {string}\n     * @return {Promise<any>}\n     */\n    setUserProperty(name: string, value: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Fetch Remote Config parameter values for your app\n     * @param cacheExpirationSeconds\n     * @return {Promise<any>}\n     */\n    fetch(cacheExpirationSeconds?: number): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Activate the Remote Config fetched config\n     * @return {Promise<any>}\n     */\n    activateFetched(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Retrieve a Remote Config value\n     * @param key {string}\n     * @param namespace {string}\n     * @return {Promise<any>}\n     */\n    getValue(key: string, namespace?: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Retrieve a Remote Config byte array\n     * @param key {string}\n     * @param namespace {string}\n     * @return {Promise<any>}\n     */\n    getByteArray(key: string, namespace?: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Get the current state of the FirebaseRemoteConfig singleton object\n     * @return {Promise<any>}\n     */\n    getInfo(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Change the settings for the FirebaseRemoteConfig object's operations\n     * @param settings {Object}\n     * @return {Promise<any>}\n     */\n    setConfigSettings(settings: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Set defaults in the Remote Config\n     * @param defaults {Object}\n     * @param namespace {string}\n     * @return {Promise<any>}\n     */\n    setDefaults(defaults: any, namespace: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n}\n"]}