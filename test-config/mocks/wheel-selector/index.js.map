{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/wheel-selector/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,8BAA8B,CAAC;AAqD7D;IAAuC,qCAAa;IAApD;;IAqBA,CAAC;IApBG;;;;OAIG;IACH,gCAAI,GAAJ,UAAK,OAA6B;QAC9B,IAAI,QAA2B,CAAC;QAC/B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,CAAE,QAAQ,CAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,wCAAY,GAAZ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,wBAAC;AAAD,CArBA,AAqBC,CArBsC,aAAa,GAqBnD","file":"index.js","sourceRoot":"","sourcesContent":["import { WheelSelector } from '@ionic-native/wheel-selector';\n\nexport interface WheelSelectorItem {\n    description?: string;\n}\nexport interface DefaultItem {\n    index: number;\n    value: string;\n}\nexport interface WheelSelectorOptions {\n    /**\n     * The title of the selector's input box\n     */\n    title: string;\n    /**\n     * The items to display (array of items).\n     */\n    items: Array<Array<WheelSelectorItem>>;\n    /**\n     * Which items to display by default.\n     */\n    defaultItems?: Array<DefaultItem>;\n    /**\n     * The 'ok' button text\n     * Default: Done\n     */\n    positiveButtonText?: string;\n    /**\n     * The 'cancel' button text\n     * Default: Cancel\n     */\n    negativeButtonText?: string;\n    /**\n     * Android only - theme color, 'light' or 'dark'.\n     * Default: light\n     */\n    theme?: string;\n    /**\n     * Whether to have the wheels 'wrap' (Android only)\n     * Default: false\n     */\n    wrapWheelText?: boolean;\n    /**\n     * The json key to display, by default it is description, this allows for setting any\n     * key/value to be displayed\n     * Default: description\n     */\n    displayKey?: string;\n}\nexport interface WheelSelectorData {\n    data: any;\n}\n\nexport class WheelSelectorMock extends WheelSelector {\n    /**\n     * Shows the wheel selector\n     * @param {WheelSelectorOptions} options Options for the wheel selector\n     * @returns {Promise<WheelSelectorData>} Returns a promise that resolves with the selected items, or an error.\n     */\n    show(options: WheelSelectorOptions): Promise<WheelSelectorData> {\n        let response: WheelSelectorData;\n         return new Promise((resolve, reject) => {\n            resolve( response );\n        });\n    };\n    /**\n     * Hide the selector\n     * @returns {Promise<void>}\n     */\n    hideSelector(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n}\n"]}