{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/hotspot/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Hotspot } from '@ionic-native/hotspot';\n\nexport interface HotspotConnectionInfo {\n    /**\n     *      The service set identifier (SSID) of the current 802.11 network.\n     */\n    SSID: string;\n    /**\n     *      The basic service set identifier (BSSID) of the current access point.\n     */\n    BSSID: string;\n    /**\n     *      The current link speed in Mbps\n     */\n    linkSpeed: string;\n    /**\n     *      The IP Address\n     */\n    IPAddress: string;\n    /**\n     *      Each configured network has a unique small integer ID, used to identify the network when performing operations on the supplicant.\n     */\n    networkID: string;\n}\nexport interface HotspotNetwork {\n    /**\n     *      Human readable network name\n     */\n    SSID: string;\n    /**\n     *      MAC Address of the access point\n     */\n    BSSID: string;\n    /**\n     *      The primary 20 MHz frequency (in MHz) of the channel over which the client is communicating with the access point.\n     */\n    frequency: number;\n    /**\n     *      The detected signal level in dBm, also known as the RSSI.\n     */\n    level: number;\n    /**\n     *      Timestamp in microseconds (since boot) when this result was last seen.\n     */\n    timestamp: number;\n    /**\n     *      Describes the authentication, key management, and encryption schemes supported by the access point.\n     */\n    capabilities: string;\n}\nexport interface HotspotNetworkConfig {\n    /**\n     *   Device IP Address\n     */\n    deviceIPAddress: string;\n    /**\n     *   Device MAC Address\n     */\n    deviceMacAddress: string;\n    /**\n     *   Gateway IP Address\n     */\n    gatewayIPAddress: string;\n    /**\n     *   Gateway MAC Address\n     */\n    gatewayMacAddress: string;\n}\nexport interface HotspotDevice {\n    /**\n     *      Hotspot IP Address\n     */\n    ip: string;\n    /**\n     *      Hotspot MAC Address\n     */\n    mac: string;\n}\n\nexport class HotspotMock extends Hotspot {\n    /**\n     * @returns {Promise<boolean>}\n     */\n    isAvailable(): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            resolve(true);\n        });\n    };\n    /**\n     * @returns {Promise<boolean>}\n     */\n    toggleWifi(): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            resolve(true);\n        });\n    };\n    /**\n     * Configures and starts hotspot with SSID and Password\n     *\n     * @param {string}    SSID        - SSID of your new Access Point\n     * @param {string}    mode        - encryption mode (Open, WEP, WPA, WPA_PSK)\n     * @param {string}    password    - password for your new Access Point\n     *\n     * @returns {Promise<any>}        - Promise to call once hotspot is started, or reject upon failure\n     */\n    createHotspot(ssid: string, mode: string, password: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Turns on Access Point\n     *\n     * @returns {Promise<boolean>} - true if AP is started\n     */\n    startHotspot(): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            resolve(true);\n        });\n    };\n    /**\n     * Configures hotspot with SSID and Password\n     *\n     * @param {string}    SSID        - SSID of your new Access Point\n     * @param {string}    mode        - encryption mode (Open, WEP, WPA, WPA_PSK)\n     * @param {string}    password    - password for your new Access Point\n     *\n     * @returns {Promise<any>}        - Promise to call when hotspot is configured, or reject upon failure\n     */\n    configureHotspot(ssid: string, mode: string, password: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Turns off Access Point\n     *\n     * @returns {Promise<boolean>} - Promise to turn off the hotspot, true on success, false on failure\n     */\n    stopHotspot(): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            resolve(true);\n        });\n    };\n    /**\n     * Checks if hotspot is enabled\n     *\n     * @returns {Promise<any>}    - Promise that hotspot is enabled, rejected if it is not enabled\n     */\n    isHotspotEnabled(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * @returns {Promise<Array<HotspotDevice>>}\n     */\n    getAllHotspotDevices(): Promise<Array<HotspotDevice>> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Connect to a WiFi network\n     *\n     * @param {string}    ssid\n     *      SSID to connect\n     * @param {string}    password\n     *      password to use\n     *\n     * @returns {Promise<any>}\n     *      Promise that connection to the WiFi network was successfull, rejected if unsuccessful\n     */\n    connectToWifi(ssid: string, password: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Connect to a WiFi network\n     *\n     * @param {string}   ssid\n     *      SSID to connect\n     * @param {string}   password\n     *      Password to use\n     * @param {string}   authentication\n     *      Authentication modes to use (LEAP, SHARED, OPEN)\n     * @param {string[]} encryption\n     *      Encryption modes to use (CCMP, TKIP, WEP104, WEP40)\n     *\n     * @returns {Promise<any>}\n     *      Promise that connection to the WiFi network was successfull, rejected if unsuccessful\n     */\n    connectToWifiAuthEncrypt(ssid: string, password: string, authentication: string, encryption: Array<string>): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Add a WiFi network\n     *\n     * @param {string}    ssid\n     *      SSID of network\n     * @param {string}    mode\n     *      Authentication mode of (Open, WEP, WPA, WPA_PSK)\n     * @param {string}    password\n     *      Password for network\n     *\n     * @returns {Promise<any>}\n     *      Promise that adding the WiFi network was successfull, rejected if unsuccessful\n     */\n    addWifiNetwork(ssid: string, mode: string, password: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Remove a WiFi network\n     *\n     * @param {string}    ssid\n     *      SSID of network\n     *\n     * @returns {Promise<any>}\n     *      Promise that removing the WiFi network was successfull, rejected if unsuccessful\n     */\n    removeWifiNetwork(ssid: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * @returns {Promise<boolean>}\n     */\n    isConnectedToInternet(): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            resolve(true);\n        });\n    };\n    /**\n     * @returns {Promise<boolean>}\n     */\n    isConnectedToInternetViaWifi(): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            resolve(true);\n        });\n    };\n    /**\n     * @returns {Promise<boolean>}\n     */\n    isWifiOn(): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            resolve(true);\n        });\n    };\n    /**\n     * @returns {Promise<boolean>}\n     */\n    isWifiSupported(): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            resolve(true);\n        });\n    };\n    /**\n     * @returns {Promise<boolean>}\n     */\n    isWifiDirectSupported(): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            resolve(true);\n        });\n    };\n    /**\n     * @returns {Promise<Array<HotspotNetwork>>}\n     */\n    scanWifi(): Promise<Array<HotspotNetwork>> {\n        let response: Array<HotspotNetwork>;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * @returns {Promise<Array<HotspotNetwork>>}\n     */\n    scanWifiByLevel(): Promise<Array<HotspotNetwork>> {\n        let response: Array<HotspotNetwork>;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * @returns {Promise<any>}\n     */\n    startWifiPeriodicallyScan(interval: number, duration: number): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * @returns {Promise<any>}\n     */\n    stopWifiPeriodicallyScan(): Promise<any> {\n       return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * @returns {Promise<HotspotNetworkConfig>}\n     */\n    getNetConfig(): Promise<HotspotNetworkConfig> {\n        let response: HotspotNetworkConfig;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * @returns {Promise<HotspotConnectionInfo>}\n     */\n    getConnectionInfo(): Promise<HotspotConnectionInfo> {\n        let response: HotspotConnectionInfo;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * @returns {Promise<string>}\n     */\n    pingHost(ip: string): Promise<string> {\n        return new Promise((resolve, reject) => {\n            resolve('');\n        });\n    };\n    /**\n     * Gets MAC Address associated with IP Address from ARP File\n     *\n     * @param {string}        ip  - IP Address that you want the MAC Address of\n     *\n     * @returns {Promise<string>}  - A Promise for the MAC Address\n     */\n    getMacAddressOfHost(ip: string): Promise<string> {\n        return new Promise((resolve, reject) => {\n            resolve('');\n        });\n    };\n    /**\n     * Checks if IP is live using DNS\n     *\n     * @param {string}        ip  - IP Address you want to test\n     *\n     * @returns {Promise<boolean>} - A Promise for whether the IP Address is reachable\n     */\n    isDnsLive(ip: string): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            resolve(true);\n        });\n    };\n    /**\n     * Checks if IP is live using socket And PORT\n     *\n     * @param {string}        ip  - IP Address you want to test\n     *\n     * @returns {Promise<boolean>} - A Promise for whether the IP Address is reachable\n     */\n    isPortLive(ip: string): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            resolve(true);\n        });\n    };\n    /**\n     * Checks if device is rooted\n     *\n     * @returns {Promise<boolean>} - A Promise for whether the device is rooted\n     */\n    isRooted(): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            resolve(true);\n        });\n    };\n}\n"]}