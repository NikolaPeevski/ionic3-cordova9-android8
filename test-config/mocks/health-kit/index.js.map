{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/health-kit/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { HealthKit } from '@ionic-native/health-kit';\n\nexport interface HealthKitOptions {\n    /**\n    * HKWorkoutActivityType constant\n    * Read more here: https://developer.apple.com/library/ios/documentation/HealthKit/Reference/HKWorkout_Class/#//apple_ref/c/tdef/HKWorkoutActivityType\n    */\n    activityType?: string;\n    /**\n    * 'hour', 'week', 'year' or 'day', default 'day'\n    */\n    aggregation?: string;\n    /**\n    *\n    */\n    amount?: number;\n    /**\n    *\n    */\n    correlationType?: string;\n    /**\n    *\n    */\n    date?: any;\n    /**\n    *\n    */\n    distance?: number;\n    /**\n    * probably useful with the former param\n    */\n    distanceUnit?: string;\n    /**\n    * in seconds, optional, use either this or endDate\n    */\n    duration?: number;\n    /**\n    *\n    */\n    endDate?: any;\n    /**\n    *\n    */\n    energy?: number;\n    /**\n    * J|cal|kcal\n    */\n    energyUnit?: string;\n    /**\n    *\n    */\n    extraData?: any;\n    /**\n    *\n    */\n    metadata?: any;\n    /**\n    *\n    */\n    quantityType?: string;\n    /**\n    *\n    */\n    readTypes?: any;\n    /**\n    *\n    */\n    requestWritePermission?: boolean;\n    /**\n    *\n    */\n    samples?: any;\n    /**\n    *\n    */\n    sampleType?: string;\n    /**\n    *\n    */\n    startDate?: any;\n    /**\n    * m|cm|mm|in|ft\n    */\n    unit?: string;\n    /**\n    *\n    */\n    requestReadPermission?: boolean;\n    /**\n    *\n    */\n    writeTypes?: any;\n}\n\nexport class HealthKitMock extends HealthKit {\n    /**\n   * Check if HealthKit is supported (iOS8+, not on iPad)\n   * @returns {Promise<any>}\n   */\n    available(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   * Pass in a type and get back on of undetermined | denied | authorized\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n    checkAuthStatus(options: HealthKitOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   * Ask some or all permissions up front\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n    requestAuthorization(options: HealthKitOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   * Formatted as yyyy-MM-dd\n   * @returns {Promise<any>}\n   */\n    readDateOfBirth(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   * Output = male|female|other|unknown\n   * @returns {Promise<any>}\n   */\n    readGender(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   * Output = A+|A-|B+|B-|AB+|AB-|O+|O-|unknown\n   * @returns {Promise<any>}\n   */\n    readBloodType(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   * Output = I|II|III|IV|V|VI|unknown\n   * @returns {Promise<any>}\n   */\n    readFitzpatrickSkinType(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   * Pass in unit (g=gram, kg=kilogram, oz=ounce, lb=pound, st=stone) and amount\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n    saveWeight(options: HealthKitOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   * Pass in unit (g=gram, kg=kilogram, oz=ounce, lb=pound, st=stone)\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n    readWeight(options: HealthKitOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   * Pass in unit (mm=millimeter, cm=centimeter, m=meter, in=inch, ft=foot) and amount\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n    saveHeight(options: HealthKitOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   * Pass in unit (mm=millimeter, cm=centimeter, m=meter, in=inch, ft=foot)\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n    readHeight(options: HealthKitOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   * no params yet, so this will return all workouts ever of any type\n   * @returns {Promise<any>}\n   */\n    findWorkouts(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   *\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n    saveWorkout(options: HealthKitOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   *\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n    querySampleType(options: HealthKitOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   *\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n    querySampleTypeAggregated(options: HealthKitOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   *\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n    deleteSamples(options: HealthKitOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   *\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n    monitorSampleType(options: HealthKitOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   *\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n    sumQuantityType(options: HealthKitOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   *\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n    saveQuantitySample(options: HealthKitOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   *\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n    saveCorrelation(options: HealthKitOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n   *\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n    queryCorrelationType(options: HealthKitOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n}\n"]}