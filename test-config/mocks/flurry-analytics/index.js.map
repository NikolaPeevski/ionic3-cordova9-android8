{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/flurry-analytics/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,eAAe,EAAE,qBAAqB,EAAE,MAAM,gCAAgC,CAAC;AAuExF;;EAEE;AACF;IAA+C,6CAAqB;IAChE,2BAA2B;IAC3B,mCAAY,eAAoB;eAC5B,kBAAM,eAAe,CAAC;IAC1B,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,4CAAQ,GAAR,UAAS,SAAiB,EAAE,MAAY;QACpC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,mDAAe,GAAf,UAAgB,SAAiB,EAAE,MAAe;QAC9C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,iDAAa,GAAb,UAAc,SAAiB,EAAE,MAAe;QAC5C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,4CAAQ,GAAR,UAAS,IAAS,EAAE,OAAY;QAC5B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,+CAAW,GAAX;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,+CAAW,GAAX,UAAY,QAAiC,EAAE,OAAe;QAC1D,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,gDAAY,GAAZ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,8CAAU,GAAV;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,gCAAC;AAAD,CA1FA,AA0FC,CA1F8C,qBAAqB,GA0FnE;;AAED;IAA0C,wCAAe;IAAzD;;IAUA,CAAC;IATG;;;;OAIG;IACH,qCAAM,GAAN,UAAO,OAA+B;QAClC,IAAI,QAA+B,CAAC;QACpC,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACN,2BAAC;AAAD,CAVA,AAUC,CAVyC,eAAe,GAUxD","file":"index.js","sourceRoot":"","sourcesContent":["import { FlurryAnalytics, FlurryAnalyticsObject } from '@ionic-native/flurry-analytics';\n\nexport interface FlurryAnalyticsOptions {\n    /** Flurry API key is required */\n    appKey: string;\n    /**\n     * Overrides the version of the app\n     */\n    version?: string;\n    /**\n     * How long can the app be paused before a new session is created,\n     * must be less than or equal to five for Android devices\n     */\n    continueSessionSeconds?: number;\n    /**\n     * Set id of the user\n     */\n    userId?: string;\n    /**\n     * Set gender of the user\n     * Valid values are \"m\", \"M\", \"f\" and \"F\"\n     */\n    gender?: string;\n    /**\n     * Set age of the user\n     */\n    age?: number;\n    /**\n     * Set error for log\n     * Values: VERBOSE, DEBUG, INFO, WARN, ERROR\n     */\n    logLevel?: string;\n    /**\n     * Defaults to false\n     */\n    enableLogging?: boolean;\n    /**\n     * Should every event show up the app's log, defaults to true\n     */\n    enableEventLogging?: boolean;\n    /**\n     * Should app crashes be recorded in flurry, defaults to false, iOS only\n     */\n    enableCrashReporting?: boolean;\n    /**\n     * Should the session continue when the app is the background, defaults to false, iOS only\n     */\n    enableBackgroundSessions?: boolean;\n    /**\n     * Should data be pushed to flurry when the app closes, defaults to true, iOS only\n     */\n    reportSessionsOnClose?: boolean;\n    /**\n     * Should data be pushed to flurry when the app is paused, defaults to true, iOS only\n     */\n    reportSessionsOnPause?: boolean;\n}\nexport interface FlurryAnalyticsLocation {\n    latitude: number;\n    longitude: number;\n    /**\n     * Set altitude\n     * It is optional and use only for iOS\n     */\n    verticalAccuracy?: number;\n    /**\n     * Set radius about 2d point\n     * It is optional and use only for iOS\n     */\n    horizontalAccuracy?: number;\n}\n/**\n* @hidden\n*/\nexport class FlurryAnalyticsObjectMock extends FlurryAnalyticsObject {\n    // private _objectInstance;\n    constructor(_objectInstance: any) {\n        super(_objectInstance);\n    };\n    /**\n     * This function set the Event\n     * @param eventName {string} Name of the event\n     * @param [params] {Object} Optional params\n     * @return {Promise<any>} Returns a promise that resolves when event is sent\n     */\n    logEvent(eventName: string, params?: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Start a timed event\n     * @param eventName {string} Name of the event\n     * @param [params] {Object} Optional params\n     * @return {Promise<any>} Returns a promise that resolves when timed event is started tracking\n     */\n    startTimedEvent(eventName: string, params?: Object): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Complete a timed event\n     * @param eventName {string} Name of the event\n     * @param [params] {Object} Optional params\n     * @return {Promise<any>} Returns a promise that resolves when timed event is ended tracking\n     */\n    endTimedEvent(eventName: string, params?: Object): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * This function log an error\n     * @param code\n     * @param message\n     * @return {Promise<any>}\n     */\n    logError(code: any, message: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * This function log a page view\n     * @return {Promise<any>}\n     */\n    logPageView(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * This function set the location for the event\n     * (this is will only be used for very course grained statistics like city)\n     * @param location {FlurryAnalyticsLocation}\n     * @param message {string}\n     * @return {Promise<any>}\n     */\n    setLocation(location: FlurryAnalyticsLocation, message: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * This function start the session\n     * Only needed for older versions of Android\n     * @return {Promise<any>}\n     */\n    startSession(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * This function end the session\n     * Only needed for older versions of Android\n     * @return {Promise<any>}\n     */\n    endSession(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n}\n\nexport class FlurryAnalyticsMocks extends FlurryAnalytics {\n    /**\n     * Creates a new instance of FlurryAnalyticsObject\n     * @param options {FlurryAnalyticsOptions} options\n     * @return {FlurryAnalyticsObject}\n     */\n    create(options: FlurryAnalyticsOptions): FlurryAnalyticsObject {\n        let response: FlurryAnalyticsObject;\n        return response;\n    };\n}\n"]}