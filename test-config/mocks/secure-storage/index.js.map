{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/secure-storage/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,aAAa,EAAE,mBAAmB,EAAE,MAAM,8BAA8B,CAAC;AAElF;IAA6C,2CAAmB;IAC5D,iCAAY,eAAoB;eAAI,kBAAM,eAAe,CAAC;IAAE,CAAC;IAAA,CAAC;IAC9D;;;;OAIG;IACH,qCAAG,GAAH,UAAI,GAAW;QACX,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,EAAE,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,qCAAG,GAAH,UAAI,GAAW,EAAE,KAAa;QAC1B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,EAAE,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,wCAAM,GAAN,UAAO,GAAW;QACd,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,EAAE,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,sCAAI,GAAJ;QACI,IAAI,QAAQ,GAAkB,EAAE,CAAC;QACjC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,uCAAK,GAAL;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,8CAAY,GAAZ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,8BAAC;AAAD,CA7DA,AA6DC,CA7D4C,mBAAmB,GA6D/D;;AAED;IAAuC,qCAAa;IAApD;;IAYA,CAAC;IAXG;;;;OAIG;IACH,kCAAM,GAAN,UAAO,KAAa;QAChB,IAAI,QAAQ,GAA4B,IAAI,uBAAuB,CAAC,KAAK,CAAC,CAAC;QAC3E,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,wBAAC;AAAD,CAZA,AAYC,CAZsC,aAAa,GAYnD","file":"index.js","sourceRoot":"","sourcesContent":["import { SecureStorage, SecureStorageObject } from '@ionic-native/secure-storage';\n\nexport class SecureStorageObjectMock extends SecureStorageObject {\n    constructor(_objectInstance: any) { super(_objectInstance); };\n    /**\n     * Gets a stored item\n     * @param key {string}\n     * @returns {Promise<string>}\n     */\n    get(key: string): Promise<string> {\n        return new Promise((resolve, reject) => {\n            resolve('');\n        });\n    };\n    /**\n     * Stores a value\n     * @param key {string}\n     * @param value {string}\n     * @returns {Promise<any>}\n     */\n    set(key: string, value: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve('');\n        });\n    };\n    /**\n     * Removes a single stored item\n     * @param key {string}\n     * @returns {Promise<string>} returns a promise that resolves with the key that was removed\n     */\n    remove(key: string): Promise<string> {\n        return new Promise((resolve, reject) => {\n            resolve('');\n        });\n    };\n    /**\n     * Get all references from the storage.\n     * @returns {Promise<string[]>} returns a promise that resolves with array of keys storage\n     */\n    keys(): Promise<Array<string>> {\n        let response: Array<string> = [];\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Clear all references from the storage.\n     * @returns {Promise<any>}\n     */\n    clear(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Brings up the screen-lock settings\n     * @returns {Promise<any>}\n     */\n    secureDevice(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n}\n\nexport class SecureStorageMock extends SecureStorage {\n    /**\n     * Creates a namespaced storage.\n     * @param store {string}\n     * @returns {Promise<SecureStorageObject>}\n     */\n    create(store: string): Promise<SecureStorageObject> {\n        let response: SecureStorageObjectMock = new SecureStorageObjectMock(store);\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n}\n"]}