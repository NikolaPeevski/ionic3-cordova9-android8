{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/mobile-accessibility/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { MobileAccessibility } from '@ionic-native/mobile-accessibility';\n\nexport class MobileAccessibilityMock extends MobileAccessibility {\n    MobileAccessibilityNotifications: {\n        ANNOUNCEMENT: 'ANNOUNCEMENT';\n        BOLD_TEXT_STATUS_CHANGED: 'BOLD_TEXT_STATUS_CHANGED';\n        CLOSED_CAPTIONING_STATUS_CHANGED: 'CLOSED_CAPTIONING_STATUS_CHANGED';\n        DARKER_SYSTEM_COLORS_STATUS_CHANGED: 'DARKER_SYSTEM_COLORS_STATUS_CHANGED';\n        GRAYSCALE_STATUS_CHANGED: 'GRAYSCALE_STATUS_CHANGED';\n        GUIDED_ACCESS_STATUS_CHANGED: 'GUIDED_ACCESS_STATUS_CHANGED';\n        INVERT_COLORS_STATUS_CHANGED: 'INVERT_COLORS_STATUS_CHANGED';\n        LAYOUT_CHANGED: 'LAYOUT_CHANGED';\n        MONO_AUDIO_STATUS_CHANGED: 'MONO_AUDIO_STATUS_CHANGED';\n        PAGE_SCROLLED: 'PAGE_SCROLLED';\n        REDUCE_MOTION_STATUS_CHANGED: 'REDUCE_MOTION_STATUS_CHANGED';\n        REDUCE_TRANSPARENCY_STATUS_CHANGED: 'REDUCE_TRANSPARENCY_STATUS_CHANGED';\n        SCREEN_CHANGED: 'SCREEN_CHANGED';\n        SCREEN_READER_STATUS_CHANGED: 'SCREEN_READER_STATUS_CHANGED';\n        SPEAK_SCREEN_STATUS_CHANGED: 'SPEAK_SCREEN_STATUS_CHANGED';\n        SPEAK_SELECTION_STATUS_CHANGED: 'SPEAK_SELECTION_STATUS_CHANGED';\n        SWITCH_CONTROL_STATUS_CHANGED: 'SWITCH_CONTROL_STATUS_CHANGED';\n        TOUCH_EXPLORATION_STATUS_CHANGED: 'TOUCH_EXPLORATION_STATUS_CHANGED';\n    };\n    /**\n     * Makes an asynchronous call to native MobileAccessibility to determine if a screen reader is running.\n     * @returns {Promise<boolean>}  A result method to receive the boolean result asynchronously from the native MobileAccessibility plugin.\n     */\n    isScreenReaderRunning(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * An iOS-specific proxy for the MobileAccessibility.isScreenReaderRunning method\n     * @returns {Promise<boolean>} A result method to receive the boolean result asynchronously from the native MobileAccessibility plugin.\n     */\n    isVoiceOverRunningCallback(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * An Android/Amazon Fire OS-specific proxy for the MobileAccessibility.isScreenReaderRunning method.\n     * @returns {Promise<boolean>}  A result method to receive the boolean result asynchronously from the native MobileAccessibility plugin.\n     */\n    isTalkBackRunningCallback(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * On Android, this method returns true if ChromeVox is active and properly initialized with access to the text to speech API in the WebView.\n     * If TalkBack is running but ChromeVox is not active, this method is useful to alert the user of a potential problem.\n     * @returns {Promise<boolean>} Returns the result\n     */\n    isChromeVoxActive(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     *\n     * @returns {Promise<boolean>} Returns the result\n     */\n    isBoldTextEnabledCallback(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     *\n     * @returns {Promise<boolean>} Returns the result\n     */\n    isClosedCaptioningEnabledCallback(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     *\n     * @returns {Promise<boolean>} Returns the result\n     */\n    isDarkerSystemColorsEnabledCallback(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     *\n     * @returns {Promise<boolean>} Returns the result\n     */\n    isGrayscaleEnabledCallback(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     *\n     * @returns {Promise<boolean>} Returns the result\n     */\n    isGuidedAccessEnabledCallback(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     *\n     * @returns {Promise<boolean>} Returns the result\n     */\n    isInvertColorsEnabledCallback(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     *\n     * @returns {Promise<boolean>} Returns the result\n     */\n    isMonoAudioEnabledCallback(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     *\n     * @returns {Promise<boolean>} Returns the result\n     */\n    isReduceMotionEnabledCallback(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     *\n     * @returns {Promise<boolean>} Returns the result\n     */\n    isReduceTransparencyEnabledCallback(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     *\n     * @returns {Promise<boolean>} Returns the result\n     */\n    isSpeakScreenEnabledCallback(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     *\n     * @returns {Promise<boolean>} Returns the result\n     */\n    isSpeakSelectionEnabledCallback(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     *\n     * @returns {Promise<boolean>} Returns the result\n     */\n    isSwitchControlRunningCallback(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     *\n     * @returns {Promise<boolean>} Returns the result\n     */\n    isTouchExplorationEnabledCallback(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     *\n     * * @returns {Promise<number>} Returns the result\n     */\n    getTextZoomCallback(): Promise<number> {\n        let response: number;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * @param textZoom {number} A percentage value by which text in the WebView should be scaled.\n     */\n    setTextZoom(textZoom: number): void {};\n    /**\n     *\n     */\n    updateTextZoom(): void {};\n    /**\n     * A Boolean value which specifies whether to use the preferred text zoom of a default percent value of 100.\n     * @param value {boolean} Returns the result\n     */\n    usePreferredTextZoom(value: boolean): void {};\n    /**\n     * Posts a notification with a string for the screen reader to announce if it is running.\n     * @param mobileAccessibilityNotification {any}\n     * @param value {string} A string to be announced by a screen reader.\n     * @returns {Promise<boolean>} Returns the result\n     */\n    postNotification(mobileAccessibilityNotification: any, value: string): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Speaks a given string through the screenreader. On Android, if ChromeVox is active, it will use the specified queueMode and properties.\n     * @param value {string}\n     * @param queueMode {mumber}\n     * @param properties {any}\n     */\n    speak(value: string, queueMode?: number, properties?: any): void {};\n    /**\n     * Stops speech.\n     */\n    stop(): void {};\n}\n"]}