{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/device-orientation/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,kCAAkC,CAAC;AACrE,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAiC7C;IAA2C,yCAAiB;IAA5D;;IAuBA,CAAC;IAtBG,iDAAiB,GAAjB;QACI,IAAI,IAAqC,CAAC;QAE1C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACX,CAAC;IAAA,CAAC;IACE;;;;;;OAMG;IACH,4CAAY,GAAZ,UAAa,OAAyC;QAClD,IAAI,IAAqC,CAAC;QAE1C,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,4BAAC;AAAD,CAvBA,AAuBC,CAvB0C,iBAAiB,GAuB3D","file":"index.js","sourceRoot":"","sourcesContent":["import { DeviceOrientation } from '@ionic-native/device-orientation';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nexport interface DeviceOrientationCompassHeading {\n    /**\n     * The heading in degrees from 0-359.99 at a single moment in time. (Number)\n     */\n    magneticHeading: number;\n    /**\n     * The heading relative to the geographic North Pole in degrees 0-359.99 at a single moment in time. A negative value indicates that the true heading can't be determined. (Number)\n     */\n    trueHeading: number;\n    /**\n     * The deviation in degrees between the reported heading and the true heading. (Number)\n     */\n    headingAccuracy: number;\n    /**\n     * The time at which this heading was determined. (DOMTimeStamp)\n     */\n    timestamp: any;\n}\n\nexport interface DeviceOrientationCompassOptions {\n    /**\n     * How often to retrieve the compass heading in milliseconds. (Number) (Default: 100)\n     */\n    frequency?: number;\n    /**\n     * The change in degrees required to initiate a watchHeading success callback. When this value is set, frequency is ignored. (Number)\n     */\n    filter?: number;\n}\n\nexport class DeviceOrientationMock extends DeviceOrientation {\n    getCurrentHeading(): Promise<DeviceOrientationCompassHeading> {\n        let data: DeviceOrientationCompassHeading;\n\n        return new Promise((resolve, reject) => {\n            resolve(data);\n        });\n};\n    /**\n     * Get the device current heading at a regular interval\n     *\n     * Stop the watch by unsubscribing from the observable\n     * @param {DeviceOrientationCompassOptions} options Options for compass. Frequency and Filter. Optional\n     * @returns {Observable<DeviceOrientationCompassHeading>} Returns an observable that contains the compass heading\n     */\n    watchHeading(options?: DeviceOrientationCompassOptions): Observable<DeviceOrientationCompassHeading> {\n        let data: DeviceOrientationCompassHeading;\n\n        return Observable.create( (observer: Observer<any>) => {\n            observer.next(data);\n            observer.complete();\n        });\n    };\n}\n"]}