{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/android-permissions/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,mCAAmC,CAAC;AAEvE;IAA4C,0CAAkB;IAA9D;;IA0CA,CAAC;IAxCG;;;;OAIG;IACH,gDAAe,GAAf,UAAgB,UAAkB;QAC9B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,kDAAiB,GAAjB,UAAkB,UAAkB;QAChC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,mDAAkB,GAAlB,UAAmB,WAAqB;QACpC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,8CAAa,GAAb,UAAc,UAAkB;QAC5B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,6BAAC;AAAD,CA1CA,AA0CC,CA1C2C,kBAAkB,GA0C7D","file":"index.js","sourceRoot":"","sourcesContent":["import { AndroidPermissions } from '@ionic-native/android-permissions';\n\nexport class AndroidPermissionsMock extends AndroidPermissions {\n    PERMISSION: any;\n    /**\n     * Check permission\n     * @param permission {string} The name of the permission\n     * @return {Promise<any>} Returns a promise\n     */\n    checkPermission(permission: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Request permission\n     * @param permission {string} The name of the permission to request\n     * @return {Promise<any>}\n     */\n    requestPermission(permission: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Request permissions\n     * @param permissions {Array<string>} An array with permissions\n     * @return {Promise<any>} Returns a promise\n     */\n    requestPermissions(permissions: string[]): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * This function still works now, will not support in the future.\n     * @param permission {string} The name of the permission\n     * @return {Promise<any>} Returns a promise\n     */\n    hasPermission(permission: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n}\n"]}