{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/background-mode/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAC;AAC/D,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAoC7C;IAAwC,sCAAc;IAAtD;;IA6FA,CAAC;IA5FG;;;OAGG;IACH,mCAAM,GAAN,cAAiB,CAAC;IAAA,CAAC;IACnB;;;OAGG;IACH,oCAAO,GAAP;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,sCAAS,GAAT;QACI,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,qCAAQ,GAAR;QACI,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,wCAAW,GAAX,UAAY,OAAqC;QAC7C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,sCAAS,GAAT,UAAU,OAAqC,IAAS,CAAC;IAAA,CAAC;IAC1D;;;;OAIG;IACH,+BAAE,GAAF,UAAG,KAAa;QACZ,IAAI,QAAa,CAAC;QAClB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;OAEG;IACH,6CAAgB,GAAhB,cAA0B,CAAC;IAAA,CAAC;IAC5B;;OAEG;IACH,wDAA2B,GAA3B,cAAqC,CAAC;IAAA,CAAC;IACvC;;OAEG;IACH,6CAAgB,GAAhB,cAA0B,CAAC;IAAA,CAAC;IAC5B;;OAEG;IACH,+CAAkB,GAAlB,cAA4B,CAAC;IAAA,CAAC;IAC9B;;OAEG;IACH,gDAAmB,GAAnB,cAA6B,CAAC;IAAA,CAAC;IAC/B;;OAEG;IACH,wCAAW,GAAX;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,KAAK,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;OAEG;IACH,mCAAM,GAAN,cAAgB,CAAC;IAAA,CAAC;IAClB;;OAEG;IACH,mCAAM,GAAN,cAAgB,CAAC;IAAA,CAAC;IACtB,yBAAC;AAAD,CA7FA,AA6FC,CA7FuC,cAAc,GA6FrD","file":"index.js","sourceRoot":"","sourcesContent":["import { BackgroundMode } from '@ionic-native/background-mode';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\n/**\n * Configurations items that can be updated.\n */\nexport interface BackgroundModeConfiguration {\n    /**\n     * Title of the background task\n     */\n    title?: String;\n    /**\n     * Description of background task\n     */\n    text?: String;\n    /**\n     * This will look for <icon name>.png in platforms/android/res/drawable|mipmap\n     */\n    icon?: string;\n    color?: string;\n    /**\n     * By default the app will come to foreground when taping on the notification. If false, plugin wont come to foreground when tapped.\n     */\n    resume?: boolean;\n    hidden?: boolean;\n    bigText?: boolean;\n    /**\n     * The text that scrolls itself on statusbar\n     */\n    ticker?: String;\n    /**\n     * if true plugin will not display a notification. Default is false.\n     */\n    silent?: boolean;\n}\n\nexport class BackgroundModeMock extends BackgroundMode {\n    /**\n     * Enable the background mode.\n     * Once called, prevents the app from being paused while in background.\n     */\n    enable(): void { };\n    /**\n     * Disable the background mode.\n     * Once the background mode has been disabled, the app will be paused when in background.\n     */\n    disable(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Checks if background mode is enabled or not.\n     * @returns {boolean} returns a boolean that indicates if the background mode is enabled.\n     */\n    isEnabled(): boolean {\n        return true;\n    };\n    /**\n     * Can be used to get the information if the background mode is active.\n     * @returns {boolean} returns a boolean that indicates if the background mode is active.\n     */\n    isActive(): boolean {\n        return true;\n    };\n    /**\n     * Override the default title, ticker and text.\n     * Available only for Android platform.\n     * @param {BackgroundModeConfiguration} options List of option to configure. See table below\n     */\n    setDefaults(options?: BackgroundModeConfiguration): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Modify the displayed information.\n     * Available only for Android platform.\n     * @param {BackgroundModeConfiguration} options Any options you want to update. See table below.\n     */\n    configure(options?: BackgroundModeConfiguration): void {};\n    /**\n     * Listen for events that the plugin fires. Available events are `enable`, `disable`, `activate`, `deactivate` and `failure`.\n     * @param event {string} Event name\n     * @returns {Observable<any>}\n     */\n    on(event: string): Observable<any> {\n        let response: any;\n        return Observable.create((observer: Observer<any>) => {\n            observer.next(response);\n            observer.complete();\n        });\n    };\n    /**\n     * Android allows to programmatically move from foreground to background.\n     */\n    moveToBackground(): void {};\n    /**\n     * Enable GPS-tracking in background (Android).\n     */\n    disableWebViewOptimizations(): void {};\n    /**\n     * Android allows to programmatically move from background to foreground.\n     */\n    moveToForeground(): void {};\n    /**\n     * Override the back button on Android to go to background instead of closing the app.\n     */\n    overrideBackButton(): void {};\n    /**\n     * Exclude the app from the recent task list works on Android 5.0+.\n     */\n    excludeFromTaskList(): void {};\n    /**\n     * The method works async instead of isActive() or isEnabled().\n     */\n    isScreenOff(): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            resolve(false);\n        });\n    };\n    /**\n     * Turn screen on\n     */\n    wakeUp(): void {};\n    /**\n     * Turn screen on and show app even locked\n     */\n    unlock(): void {};\n}\n"]}