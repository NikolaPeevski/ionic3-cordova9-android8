{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/location-accuracy/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,iCAAiC,CAAC;AAEnE;IAA0C,wCAAgB;IAA1D;;IAgGA,CAAC;IA/FG;;;OAGG;IACH,yCAAU,GAAV;QACI,IAAI,QAAQ,GAAY,IAAI,CAAC;QAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,2CAAY,GAAZ;QACI,IAAI,QAAQ,GAAY,IAAI,CAAC;QAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,sCAAO,GAAP,UAAQ,QAAgB;QACpB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IAkEN,2BAAC;AAAD,CAhGA,AAgGC,CAhGyC,gBAAgB,GAgGzD","file":"index.js","sourceRoot":"","sourcesContent":["import { LocationAccuracy } from '@ionic-native/location-accuracy';\n\nexport class LocationAccuracyMock extends LocationAccuracy {\n    /**\n     * Indicates if you can request accurate location\n     * @returns {Promise<boolean>} Returns a promise that resovles with a boolean that indicates if you can request accurate location\n     */\n    canRequest(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Indicates if a request is currently in progress\n     * @returns {Promise<boolean>} Returns a promise that resolves with a boolean that indicates if a request is currently in progress\n     */\n    isRequesting(): Promise<boolean> {\n        let response: boolean = true;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Requests accurate location\n     * @param accuracy {number} Accuracy, from 0 to 4. You can use the static properties of this class that start with REQUEST_PRIORITY_\n     * @returns {Promise<any>} Returns a promise that resolves on success and rejects if an error occurred\n     */\n    request(accuracy: number): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    REQUEST_PRIORITY_NO_POWER: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    REQUEST_PRIORITY_LOW_POWER: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    REQUEST_PRIORITY_BALANCED_POWER_ACCURACY: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    REQUEST_PRIORITY_HIGH_ACCURACY: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    SUCCESS_SETTINGS_SATISFIED: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    SUCCESS_USER_AGREED: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    ERROR_ALREADY_REQUESTING: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    ERROR_INVALID_ACTION: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    ERROR_INVALID_ACCURACY: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    ERROR_EXCEPTION: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    ERROR_CANNOT_CHANGE_ACCURACY: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    ERROR_USER_DISAGREED: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    ERROR_GOOGLE_API_CONNECTION_FAILED: number;\n}\n"]}