{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/jins-meme/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { JinsMeme } from '@ionic-native/jins-meme';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nexport class JinsMemeMock extends JinsMeme {\n    /**\n     * Authentication and authorization of App and SDK.\n     * Must call this method first.\n     * Sign up for an app ID (and get an app/client secret) at developers.jins.com\n     *\n     *@param {string} setAppClientID\n     *@param {string} clientSecret\n     *@returns {Promise<any>}\n     */\n    setAppClientID(appClientId: string, clientSecret: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Starts scanning for JINS MEME.\n     * @returns {Observable<any>}\n     */\n    startScan(): Observable<any> {\n        let response: any;\n        return Observable.create((observer: Observer<any>) => {\n            observer.next(response);\n            observer.complete();\n        });\n    };\n    /**\n     * Stops scanning JINS MEME.\n     * @returns {Promise<any>}\n     */\n    stopScan(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Establishes connection to JINS MEME.\n     * @param {string} target\n     * @returns {Observable<any>}\n     */\n    connect(target: string): Observable<any> {\n        let response: any;\n        return Observable.create((observer: Observer<any>) => {\n            observer.next(response);\n            observer.complete();\n        });\n    };\n    /**\n     * Set auto connection mode.\n     *@param {Boolean} flag\n     *@returns {Promise<any>}\n     */\n    setAutoConnect(flag: boolean): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Returns whether a connection to JINS MEME has been established.\n     *@returns {Promise<any>}\n     */\n    isConnected(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Disconnects from JINS MEME.\n     *@returns {Promise<any>}\n     */\n    disconnect(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Starts receiving realtime data.\n     * @returns {Observable<any>}\n     */\n    startDataReport(): Observable<any> {\n        let response: any;\n        return Observable.create((observer: Observer<any>) => {\n            observer.next(response);\n            observer.complete();\n        });\n    };\n    /**\n    * Stops receiving data.\n    *@returns {Promise<any>}\n    */\n    stopDataReport(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Returns SDK version.\n     *\n     *@returns {Promise<any>}\n     */\n    getSDKVersion(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Returns JINS MEME connected with other apps.\n     *@returns {Promise<any>}\n     */\n    getConnectedByOthers(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Returns calibration status\n     *@returns {Promise<any>}\n     */\n    isCalibrated(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Returns device type.\n     *@returns {Promise<any>}\n     */\n    getConnectedDeviceType(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Returns hardware version.\n     *@returns {Promise<any>}\n     */\n    getConnectedDeviceSubType(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Returns FW Version.\n     *@returns {Promise<any>}\n     */\n    getFWVersion(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Returns HW Version.\n     *@returns {Promise<any>}\n     */\n    getHWVersion(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Returns response about whether data was received or not.\n     *@returns {Promise<any>}\n     */\n    isDataReceiving(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n}\n"]}