{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/social-sharing/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { SocialSharing } from '@ionic-native/social-sharing';\n\nexport class SocialSharingMock extends SocialSharing {\n    /**\n         * Shares using the share sheet\n         * @param message {string} The message you would like to share.\n         * @param subject {string} The subject\n         * @param file {string|string[]} URL(s) to file(s) or image(s), local path(s) to file(s) or image(s), or base64 data of an image. Only the first file/image will be used on Windows Phone.\n         * @param url {string} A URL to share\n         * @returns {Promise<any>}\n         */\n    share(message?: string, subject?: string, file?: string | string[], url?: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Shares using the share sheet with additional options and returns a result object or an error message (requires plugin version 5.1.0+)\n     * @param options {object} The options object with the message, subject, files, url and chooserTitle properties.\n     * @returns {Promise<any>}\n     */\n    shareWithOptions(options: {\n        message?: string;\n        subject?: string;\n        files?: string | string[];\n        url?: string;\n        chooserTitle?: string;\n    }): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Checks if you can share via a specific app.\n     * @param appName {string} App name or package name. Examples: instagram or com.apple.social.facebook\n     * @param message {string}\n     * @param subject {string}\n     * @param image {string}\n     * @param url {string}\n     * @returns {Promise<any>}\n     */\n    canShareVia(appName: string, message?: string, subject?: string, image?: string, url?: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Shares directly to Twitter\n     * @param message {string}\n     * @param image {string}\n     * @param url {string}\n     * @returns {Promise<any>}\n     */\n    shareViaTwitter(message: string, image?: string, url?: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Shares directly to Facebook\n     * @param message {string}\n     * @param image {string}\n     * @param url {string}\n     * @returns {Promise<any>}\n     */\n    shareViaFacebook(message: string, image?: string, url?: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Shares directly to Facebook with a paste message hint\n     * @param message {string}\n     * @param image {string}\n     * @param url {string}\n     * @param pasteMessageHint {string}\n     * @returns {Promise<any>}\n     */\n    shareViaFacebookWithPasteMessageHint(message: string, image?: string, url?: string, pasteMessageHint?: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Shares directly to Instagram\n     * @param message {string}\n     * @param image {string}\n     * @returns {Promise<any>}\n     */\n    shareViaInstagram(message: string, image: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Shares directly to WhatsApp\n     * @param message {string}\n     * @param image {string}\n     * @param url {string}\n     * @returns {Promise<any>}\n     */\n    shareViaWhatsApp(message: string, image?: string, url?: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Shares directly to a WhatsApp Contact\n     * @param receiver {string} Pass phone number on Android, and Addressbook ID (abid) on iOS\n     * @param message {string} Message to send\n     * @param image {string} Image to send (does not work on iOS\n     * @param url {string} Link to send\n     * @returns {Promise<any>}\n     */\n    shareViaWhatsAppToReceiver(receiver: string, message: string, image?: string, url?: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Share via SMS\n     * @param messge {string} message to send\n     * @param phoneNumber {string} Number or multiple numbers seperated by commas\n     * @returns {Promise<any>}\n     */\n    shareViaSMS(messge: string, phoneNumber: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Checks if you can share via email\n     * @returns {Promise<any>}\n     */\n    canShareViaEmail(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Share via Email\n     * @param message {string}\n     * @param subject {string}\n     * @param to {string[]}\n     * @param cc {string[]} Optional\n     * @param bcc {string[]} Optional\n     * @param files {string|string[]} Optional URL or local path to file(s) to attach\n     * @returns {Promise<any>}\n     */\n    shareViaEmail(message: string, subject: string, to: string[], cc?: string[], bcc?: string[], files?: string | string[]): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Share via AppName\n     * @param appName {string} App name or package name. Examples: instagram or com.apple.social.facebook\n     * @param message {string}\n     * @param subject {string}\n     * @param image {string}\n     * @param url {string}\n     * @returns {Promise<any>}\n     */\n    shareVia(appName: string, message: string, subject?: string, image?: string, url?: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * defines the popup position before call the share method.\n     * @param targetBounds {string} left, top, width, height\n     */\n    setIPadPopupCoordinates(targetBounds: string): void { };\n}\n"]}