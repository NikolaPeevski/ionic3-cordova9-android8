{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/zeroconf/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAkB7C;IAAkC,gCAAQ;IAA1C;;IAgFA,CAAC;IA/EG;;;OAGG;IACH,kCAAW,GAAX;QACI,IAAI,QAAQ,GAAW,EAAE,CAAC;QACzB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;;OAQG;IACH,+BAAQ,GAAR,UAAS,IAAY,EAAE,MAAc,EAAE,IAAY,EAAE,IAAY,EAAE,SAAc;QAC7E,IAAI,QAAwB,CAAC;QAC5B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,iCAAU,GAAV,UAAW,IAAY,EAAE,MAAc,EAAE,IAAY;QAChD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,2BAAI,GAAJ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,4BAAK,GAAL,UAAM,IAAY,EAAE,MAAc;QAC9B,IAAI,QAAwB,CAAC;QAC7B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,8BAAO,GAAP,UAAQ,IAAY,EAAE,MAAc;QAChC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,4BAAK,GAAL;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,mBAAC;AAAD,CAhFA,AAgFC,CAhFiC,QAAQ,GAgFzC","file":"index.js","sourceRoot":"","sourcesContent":["import { Zeroconf } from '@ionic-native/zeroconf';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nexport interface ZeroconfService {\n    domain: string;\n    type: string;\n    name: string;\n    port: number;\n    hostname: string;\n    ipv4Addresses: Array<string>;\n    ipv6Addresses: Array<string>;\n    txtRecord: any;\n}\nexport interface ZeroconfResult {\n    action: 'registered' | 'added' | 'removed';\n    service: ZeroconfService;\n}\n\nexport class ZeroconfMock extends Zeroconf {\n    /**\n     * Returns this device's hostname.\n     * @return {Promise<string>}\n     */\n    getHostname(): Promise<string> {\n        let response: string = '';\n         return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Publishes a new service.\n     * @param type {string} Service type name, e.g. \"_http._tcp\".\n     * @param domain {string} Domain scope of the service, typically \"local.\".\n     * @param name {string} Unqualified service instance name.\n     * @param port {number} Local port on which the service runs.\n     * @param txtRecord {any} Arbitrary key/value pairs describing the service.\n     * @return {Promise<ZeroconfResult>} Returns a Promise that resolves with the registered service.\n     */\n    register(type: string, domain: string, name: string, port: number, txtRecord: any): Promise<ZeroconfResult> {\n        let response: ZeroconfResult;\n         return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Unregisters a service.\n     * @param type {string} Service type name, e.g. \"_http._tcp\".\n     * @param domain {string} Domain scope of the service, typically \"local.\".\n     * @param name {string} Unqualified service instance name.\n     * @return {Promise<void>}\n     */\n    unregister(type: string, domain: string, name: string): Promise<any> {\n         return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Unregisters all published services.\n     * @return {Promise<void>}\n     */\n    stop(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Starts watching for services of the specified type.\n     * @param type {string} Service type name, e.g. \"_http._tcp\".\n     * @param domain {string} Domain scope of the service, typically \"local.\".\n     * @return {Observable<ZeroconfResult>} Returns an Observable that notifies of each service added or removed.\n     */\n    watch(type: string, domain: string): Observable<ZeroconfResult> {\n        let response: ZeroconfResult;\n        return Observable.create((observer: Observer<any>) => {\n            observer.next(response);\n            observer.complete();\n        });\n    };\n    /**\n     * Stops watching for services of the specified type.\n     * @param type {string} Service type name, e.g. \"_http._tcp\".\n     * @param domain {string} Domain scope of the service, typically \"local.\".\n     * @return {Promise<void>}\n     */\n    unwatch(type: string, domain: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Closes the service browser and stops watching.\n     * @return {Promise<void>}\n     */\n    close(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n}\n"]}