{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/background-geolocation/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { BackgroundGeolocation } from '@ionic-native/background-geolocation';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nexport interface BackgroundGeolocationResponse {\n    /**\n     * ID of location as stored in DB (or null)\n     */\n    locationId: number;\n    /**\n     * Service provider\n     */\n    serviceProvider: string;\n    /**\n     * true if location recorded as part of debug\n     */\n    debug: boolean;\n    /**\n     * UTC time of this fix, in milliseconds since January 1, 1970.\n     */\n    time: number;\n    /**\n     * latitude, in degrees.\n     */\n    latitude: number;\n    /**\n     * longitude, in degrees.\n     */\n    longitude: number;\n    /**\n     * estimated accuracy of this location, in meters.\n     */\n    accuracy: number;\n    /**\n     * speed if it is available, in meters/second over ground.\n     */\n    speed: number;\n    /**\n     * altitude if available, in meters above the WGS 84 reference ellipsoid.\n     */\n    altitude: number;\n    /**\n      * accuracy of the altitude if available.\n      */\n    altitudeAccuracy: number;\n    /**\n     * bearing, in degrees.\n     */\n    bearing: number;\n    /**\n     * A Coordinates object defining the current location\n     */\n    coords: Coordinates;\n    /**\n     * A timestamp representing the time at which the location was retrieved.\n     */\n    timestamp: number;\n}\nexport interface BackgroundGeolocationConfig {\n    /**\n     * Desired accuracy in meters. Possible values [0, 10, 100, 1000]. The lower\n     * the number, the more power devoted to GeoLocation resulting in higher\n     * accuracy readings. 1000 results in lowest power drain and least accurate\n     * readings. @see Apple docs (https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html#//apple_ref/occ/instp/CLLocationManager/desiredAccuracy)\n     */\n    desiredAccuracy: number;\n    /**\n     * Stationary radius in meters. When stopped, the minimum distance the device\n     * must move beyond the stationary location for aggressive background-tracking\n     * to engage.\n     */\n    stationaryRadius: number;\n    /**\n     * When enabled, the plugin will emit sounds for life-cycle events of\n     * background-geolocation! See debugging sounds table.\n     */\n    debug?: boolean;\n    /**\n     * The minimum distance (measured in meters) a device must move horizontally\n     * before an update event is generated. @see Apple docs. (https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/CLLocationManager/CLLocationManager.html#//apple_ref/occ/instp/CLLocationManager/distanceFilter)\n     */\n    distanceFilter: number;\n    /**\n     * IOS, ANDROID ONLY\n     * Enable this in order to force a stop() when the application terminated\n     * (e.g. on iOS, double-tap home button, swipe away the app).o\n     *\n     * Defaults to true\n     */\n    stopOnTerminate?: boolean;\n    /**\n  \n     * ANDROID ONLY\n  \n     * Start background service on device boot.\n  \n     *\n     * Defaults to false\n  \n     */\n    startOnBoot?: boolean;\n    /**\n  \n     * ANDROID ONLY\n  \n     * If false location service will not be started in foreground and no notification will be shown.\n     *\n     * Defaults to true\n  \n     */\n    startForeground?: boolean;\n    /**\n     * ANDROID ONLY\n     * When using BackgroundGeolocation.LocationProvider.ANDROID_DISTANCE_FILTER_PROVIDER:\n     * The minimum time interval between location updates in milliseconds.\n     * @see Android docs (http://developer.android.com/reference/android/location/LocationManager.html#requestLocationUpdates(long,%20float,%20android.location.Criteria,%20android.app.PendingIntent))\n     * and the MS doc (http://msdn.microsoft.com/en-us/library/windows/apps/windows.devices.geolocation.geolocator.reportinterval)\n     * for more information\n     * When using BackgroundGeolocation.LocationProvider.ANDROID_ACTIVITY_PROVIDER:\n     * Rate in milliseconds at which your app prefers to receive location updates.\n     * @see Android docs (https://developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#getInterval())\n     */\n    interval?: number;\n    /**\n     * ANDROID ONLY\n     * Custom notification title in the drawer.\n     */\n    notificationTitle?: string;\n    /**\n     * ANDROID ONLY\n     * Custom notification text in the drawer.\n     */\n    notificationText?: string;\n    /**\n     * ANDROID ONLY\n     * The accent color to use for notification. Eg. #4CAF50.\n     */\n    notificationIconColor?: string;\n    /**\n  \n     * ANDROID ONLY\n  \n     * The filename of a custom notification icon. See android quirks.\n  \n     * NOTE: Only available for API Level >=21.\n  \n     */\n    notificationIconLarge?: string;\n    /**\n  \n     * ANDROID ONLY\n  \n     * The filename of a custom notification icon. See android quirks.\n  \n     * NOTE: Only available for API Level >=21.\n  \n     */\n    notificationIconSmall?: string;\n    /**\n     * ANDROID ONLY\n     * Set location service provider @see wiki (https://github.com/mauron85/cordova-plugin-background-geolocation/wiki/Android-providers)\n     */\n    locationProvider?: number;\n    /**\n     * IOS ONLY\n     * [AutomotiveNavigation, OtherNavigation, Fitness, Other] Presumably,\n     * this affects iOS GPS algorithm. @see Apple docs for more information\n     * (https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/CLLocationManager/CLLocationManager.html#//apple_ref/occ/instp/CLLocationManager/activityType)\n     */\n    activityType?: string;\n    /**\n  \n     * IOS ONLY\n  \n     * Pauses location updates when app is paused\n  \n     *\n     * Defaults to true\n  \n     */\n    pauseLocationUpdates?: boolean;\n    /**\n  \n     * Server url where to send HTTP POST with recorded locations\n  \n     * @see https://github.com/mauron85/cordova-plugin-background-geolocation#http-locations-posting\n  \n     */\n    url?: string;\n    /**\n  \n     * Server url where to send fail to post locations\n  \n     * @see https://github.com/mauron85/cordova-plugin-background-geolocation#http-locations-posting\n  \n     */\n    syncUrl?: string;\n    /**\n     * Specifies how many previously failed locations will be sent to server at once\n  \n     *\n     * Defaults to 100\n  \n     */\n    syncThreshold?: number;\n    /**\n  \n     * Optional HTTP headers sent along in HTTP request\n  \n     */\n    httpHeaders?: any;\n    /**\n     * IOS ONLY\n  \n     * Switch to less accurate significant changes and region monitory when in background (default)\n     *\n     * Defaults to 100\n  \n     */\n    saveBatteryOnBackground?: boolean;\n    /**\n  \n     * Limit maximum number of locations stored into db\n  \n     *\n     * Defaults to 10000\n  \n     */\n    maxLocations?: number;\n    /**\n     * ANDROID ONLY with BackgroundGeolocation.LocationProvider.ANDROID_ACTIVITY_PROVIDER\n     *\n     * Fastest rate in milliseconds at which your app can handle location updates.\n     * @see Android docs (https://developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#getFastestInterval())\n     */\n    fastestInterval?: number;\n    /**\n     * ANDROID ONLY with BackgroundGeolocation.LocationProvider.ANDROID_ACTIVITY_PROVIDER\n     *\n     * Rate in milliseconds at which activity recognition occurs. Larger values will result in fewer activity detections while improving battery life.\n     */\n    activitiesInterval?: number;\n    /**\n     * ANDROID ONLY with BackgroundGeolocation.LocationProvider.ANDROID_ACTIVITY_PROVIDER\n     *\n     * stop() is forced, when the STILL activity is detected (default is true)\n     */\n    stopOnStillActivity?: boolean;\n}\n\nexport class BackgroundGeolocatioMock extends BackgroundGeolocation {\n    /**\n  \n     * Set location service provider @see https://github.com/mauron85/cordova-plugin-background-geolocation/wiki/Android-providers\n  \n     *\n     * Possible values:\n     *  ANDROID_DISTANCE_FILTER_PROVIDER: 0,\n  \n     *  ANDROID_ACTIVITY_PROVIDER: 1\n  \n     *\n     * @enum {number}\n  \n     */\n    LocationProvider: any;\n    /**\n     * Desired accuracy in meters. Possible values [0, 10, 100, 1000].\n  \n     * The lower the number, the more power devoted to GeoLocation resulting in higher accuracy readings.\n  \n     * 1000 results in lowest power drain and least accurate readings.\n  \n     *\n     * Possible values:\n     *  HIGH: 0\n  \n     *  MEDIUM: 10\n  \n     *  LOW: 100\n  \n     *  PASSIVE: 1000\n     *\n     * enum {number}\n  \n     */\n    Accuracy: any;\n    /**\n  \n     * Used in the switchMode function\n  \n     *\n     * Possible values:\n     *  BACKGROUND: 0\n     *  FOREGROUND: 1\n  \n     *\n     * @enum {number}\n  \n     */\n    Mode: any;\n    /**\n     * Configure the plugin.\n     *\n     * @param options {BackgroundGeolocationConfig} options An object of type Config\n     * @return {Observable<BackgroundGeolocationResponse>}\n     */\n    configure(options: BackgroundGeolocationConfig): Observable<BackgroundGeolocationResponse> {\n        return Observable.create((observer: Observer<any>) => {\n            let response: BackgroundGeolocationResponse;\n            observer.next( response  );\n            observer.complete();\n        });\n    };\n    /**\n     * Turn ON the background-geolocation system.\n     * The user will be tracked whenever they suspend the app.\n     * @returns {Promise<any>}\n     */\n    start(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Turn OFF background-tracking\n     * @returns {Promise<any>}\n     */\n    stop(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Inform the native plugin that you're finished, the background-task may be completed\n     * @returns {Promise<any>}\n     */\n    finish(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Force the plugin to enter \"moving\" or \"stationary\" state\n     * @param isMoving {boolean}\n     * @returns {Promise<any>}\n     */\n    changePace(isMoving: boolean): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Setup configuration\n     * @param options {BackgroundGeolocationConfig}\n     * @returns {Promise<any>}\n     */\n    setConfig(options: BackgroundGeolocationConfig): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Returns current stationaryLocation if available. null if not\n     * @returns {Promise<Location>}\n     */\n    getStationaryLocation(): Promise<BackgroundGeolocationResponse> {\n        let response: BackgroundGeolocationResponse;\n        return new Promise((resolve, reject) => {\n            resolve( response ) ;\n        });\n    };\n    /**\n     * Add a stationary-region listener. Whenever the devices enters \"stationary-mode\",\n     * your #success callback will be executed with #location param containing #radius of region\n     * @returns {Promise<any>}\n     */\n    onStationary(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Check if location is enabled on the device\n     * @returns {Promise<number>} Returns a promise with int argument that takes values 0, 1 (true).\n     */\n    isLocationEnabled(): Promise<number> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Display app settings to change permissions\n     */\n    showAppSettings(): void { };\n    /**\n     * Display device location settings\n     */\n    showLocationSettings(): void { };\n    /**\n     * Method can be used to detect user changes in location services settings.\n     * If user enable or disable location services then success callback will be executed.\n     * In case or error (SettingNotFoundException) fail callback will be executed.\n     * @returns {Promise<boolean>}\n     */\n    watchLocationMode(): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Stop watching for location mode changes.\n     * @returns {Promise<any>}\n     */\n    stopWatchingLocationMode(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Method will return all stored locations.\n     * Locations are stored when:\n     *  - config.stopOnTerminate is false and main activity was killed\n     *    by the system\n     *  or\n     *  - option.debug is true\n     * @returns {Promise<any>}\n     */\n    getLocations(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n  \n     * Method will return locations, which has not been yet posted to server. NOTE: Locations does contain locationId.\n  \n     * @returns {Promise<any>}\n     */\n    getValidLocations(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Delete stored location by given locationId.\n     * @param locationId {number}\n     * @returns {Promise<any>}\n     */\n    deleteLocation(locationId: number): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Delete all stored locations.\n     * @returns {Promise<any>}\n     */\n    deleteAllLocations(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Normally plugin will handle switching between BACKGROUND and FOREGROUND mode itself.\n     * Calling switchMode you can override plugin behavior and force plugin to switch into other mode.\n     *\n     * In FOREGROUND mode plugin uses iOS local manager to receive locations and behavior is affected by option.desiredAccuracy and option.distanceFilter.\n     * In BACKGROUND mode plugin uses significant changes and region monitoring to receive locations and uses option.stationaryRadius only.\n  \n     *\n     * BackgroundGeolocation.Mode.FOREGROUND\n     * BackgroundGeolocation.Mode.BACKGROUND\n  \n     **\n     * @param modeId {number}\n     * @returns {Promise<any>}\n     */\n    switchMode(modeId: number): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n  \n     * Return all logged events. Useful for plugin debugging. Parameter limit limits number of returned entries.\n  \n     * @see https://github.com/mauron85/cordova-plugin-background-geolocation/tree/v2.2.1#debugging for more information.\n  \n     *\n     * @param limit {number} Limits the number of entries\n  \n     * @returns {Promise<any>}\n     */\n    getLogEntries(limit: number): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n}\n"]}