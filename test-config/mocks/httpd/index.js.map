{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/httpd/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAC5C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAqB7C;IAA+B,6BAAK;IAApC;;IA+BA,CAAC;IA9BG;;;;OAIG;IACH,+BAAW,GAAX,UAAY,OAAsB;QAC9B,IAAI,QAAgB,CAAC;QACrB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,0BAAM,GAAN;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;QAGI;IACJ,gCAAY,GAAZ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,gBAAC;AAAD,CA/BA,AA+BC,CA/B8B,KAAK,GA+BnC","file":"index.js","sourceRoot":"","sourcesContent":["import { Httpd } from '@ionic-native/httpd';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nexport interface HttpdOptions {\n    /**\n     * The public root directory for your web server. This path is relative to your app's www directory.\n     * Default is current directory.\n     */\n    www_root?: string;\n    /**\n     * The port number to use.\n     * Default is 8888\n     */\n    port?: number;\n    /**\n     * Setting this option to false will allow remote access to your web server (over any IP).\n     * Default is false.\n     */\n    localhost_only?: boolean;\n}\n\nexport class HttpdMock extends Httpd {\n    /**\n     * Starts a web server.\n     * @param options {HttpdOptions}\n     * @returns {Observable<string>} Returns an Observable. Subscribe to receive the URL for your web server (if succeeded). Unsubscribe to stop the server.\n     */\n    startServer(options?: HttpdOptions): Observable<string> {\n        let response: string;\n        return Observable.create((observer: Observer<any>) => {\n            observer.next(response);\n            observer.complete();\n        });\n    };\n    /**\n     * Gets the URL of the running server\n     * @returns {Promise<string>} Returns a promise that resolves with the URL of the web server.\n     */\n    getUrl(): Promise<string> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Get the local path of the running webserver\n     * @returns {Promise<string>} Returns a promise that resolves with the local path of the web server.\n      */\n    getLocalPath(): Promise<string> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n}\n"]}