{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/battery-status/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,8BAA8B,CAAC;AAC7D,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAc7C;IAAuC,qCAAa;IAApD;;IAkCA,CAAC;IAjCG;;;OAGG;IACH,oCAAQ,GAAR;QACI,IAAI,QAA+B,CAAC;QACpC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,iCAAK,GAAL;QACI,IAAI,QAA+B,CAAC;QACpC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,sCAAU,GAAV;QACI,IAAI,QAA+B,CAAC;QACpC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,wBAAC;AAAD,CAlCA,AAkCC,CAlCsC,aAAa,GAkCnD","file":"index.js","sourceRoot":"","sourcesContent":["import { BatteryStatus } from '@ionic-native/battery-status';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nexport interface BatteryStatusResponse {\n    /**\n     * The battery charge percentage\n     */\n    level: number;\n    /**\n     * A boolean that indicates whether the device is plugged in\n     */\n    isPlugged: boolean;\n}\n\nexport class BatteryStatusMock extends BatteryStatus {\n    /**\n     * Watch the change in battery level\n     * @returns {Observable<BatteryStatusResponse>} Returns an observable that pushes a status object\n     */\n    onChange(): Observable<BatteryStatusResponse> {\n        let response: BatteryStatusResponse;\n        return Observable.create((observer: Observer<any>) => {\n            observer.next(response);\n            observer.complete();\n        });\n    };\n    /**\n     * Watch when the battery level goes low\n     * @returns {Observable<BatteryStatusResponse>} Returns an observable that pushes a status object\n     */\n    onLow(): Observable<BatteryStatusResponse> {\n        let response: BatteryStatusResponse;\n        return Observable.create((observer: Observer<any>) => {\n            observer.next(response);\n            observer.complete();\n        });\n    };\n    /**\n     * Watch when the battery level goes to critial\n     * @returns {Observable<BatteryStatusResponse>} Returns an observable that pushes a status object\n     */\n    onCritical(): Observable<BatteryStatusResponse> {\n        let response: BatteryStatusResponse;\n        return Observable.create((observer: Observer<any>) => {\n            observer.next(response);\n            observer.complete();\n        });\n    };\n}\n"]}