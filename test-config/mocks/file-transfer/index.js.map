{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/file-transfer/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,YAAY,EAAE,kBAAkB,EAAE,MAAM,6BAA6B,CAAC;AA2F/E;IAAsC,oCAAY;IAAlD;;IAyBA,CAAC;IAPG;;;OAGG;IACH,iCAAM,GAAN;QACI,MAAM,CAAC,IAAI,sBAAsB,EAAE,CAAC;IACxC,CAAC;IAAA,CAAC;IACN,uBAAC;AAAD,CAzBA,AAyBC,CAzBqC,YAAY,GAyBjD;;AACD;;GAEG;AACH;IAA4C,0CAAkB;IAC3D,2BAA2B;IAC1B;eACI,iBAAO;IACX,CAAC;IAAA,CAAC;IAEF;;;;;;;;OAQG;IACH,uCAAM,GAAN,UAAO,OAAe,EAAE,GAAW,EAAE,OAA2B,EAAE,aAAuB;QACrF,IAAI,QAA0B,CAAC;QAC/B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;;OAQG;IACH,yCAAQ,GAAR,UAAS,MAAc,EAAE,MAAc,EAAE,aAAuB,EAAE,OAEjE;QACG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,2CAAU,GAAV,UAAW,QAAuC,IAAS,CAAC;IAAA,CAAC;IAC7D;;;OAGG;IACH,sCAAK,GAAL,cAAe,CAAC;IAAA,CAAC;IACrB,6BAAC;AAAD,CA/CA,AA+CC,CA/C2C,kBAAkB,GA+C7D","file":"index.js","sourceRoot":"","sourcesContent":["import { FileTransfer, FileTransferObject } from '@ionic-native/file-transfer';\n\nexport interface FileUploadOptions {\n    /**\n     * The name of the form element.\n     * Defaults to 'file'.\n     */\n    fileKey?: string;\n    /**\n     * The file name to use when saving the file on the server.\n     * Defaults to 'image.jpg'.\n     */\n    fileName?: string;\n    /**\n     * The HTTP method to use - either PUT or POST.\n     * Defaults to POST.\n     */\n    httpMethod?: string;\n    /**\n     * The mime type of the data to upload.\n     * Defaults to image/jpeg.\n     */\n    mimeType?: string;\n    /**\n     * A set of optional key/value pairs to pass in the HTTP request.\n     */\n    params?: {\n        [s: string]: any;\n    };\n    /**\n     * Whether to upload the data in chunked streaming mode.\n     * Defaults to true.\n     */\n    chunkedMode?: boolean;\n    /**\n     * A map of header name/header values. Use an array to specify more\n     * than one value. On iOS, FireOS, and Android, if a header named\n     * Content-Type is present, multipart form data will NOT be used.\n     */\n    headers?: {\n        [s: string]: any;\n    };\n}\nexport interface FileUploadResult {\n    /**\n     * The number of bytes sent to the server as part of the upload.\n     */\n    bytesSent: number;\n    /**\n     * The HTTP response code returned by the server.\n     */\n    responseCode: number;\n    /**\n     * The HTTP response returned by the server.\n     */\n    response: string;\n    /**\n     * The HTTP response headers by the server.\n     */\n    headers: {\n        [s: string]: any;\n    };\n}\nexport interface FileTransferError {\n    /**\n     * One of the predefined error codes listed below.\n     */\n    code: number;\n    /**\n     * URL to the source.\n     */\n    source: string;\n    /**\n     * URL to the target.\n     */\n    target: string;\n    /**\n     * HTTP status code. This attribute is only available when a response\n     * code is received from the HTTP connection.\n     */\n    http_status: number;\n    /**\n     * Response body. This attribute is only available when a response is received from the HTTP connection.\n     */\n    body: string;\n    /**\n     * Either e.getMessage or e.toString.\n     */\n    exception: string;\n}\n\nexport class FileTransferMock extends FileTransfer {\n    /**\n     * Error code rejected from upload with FileTransferError\n     * Defined in FileTransferError.\n     *      FILE_NOT_FOUND_ERR: 1   Return when file was not found\n     *      INVALID_URL_ERR: 2,     Return when url was invalid\n     *      CONNECTION_ERR: 3,      Return on connection error\n     *      ABORT_ERR: 4,           Return on aborting\n     *      NOT_MODIFIED_ERR: 5     Return on '304 Not Modified' HTTP response\n     * @enum {number}\n     */\n    FileTransferErrorCode: {\n        FILE_NOT_FOUND_ERR: number;\n        INVALID_URL_ERR: number;\n        CONNECTION_ERR: number;\n        ABORT_ERR: number;\n        NOT_MODIFIED_ERR: number;\n    };\n    /**\n     * Creates a new FileTransfer object\n     * @return {FileTransferObject}\n     */\n    create(): FileTransferObjectMock {\n        return new FileTransferObjectMock();\n    };\n}\n/**\n * @hidden\n */\nexport class FileTransferObjectMock extends FileTransferObject {\n   // private _objectInstance;\n    constructor() {\n        super();\n    };\n\n    /**\n     * Sends a file to a server.\n     *\n     * @param {string} fileUrl  Filesystem URL representing the file on the device or a data URI. For backwards compatibility, this can also be the full path of the file on the device.\n     * @param {string} url  URL of the server to receive the file, as encoded by encodeURI().\n     * @param {FileUploadOptions} options  Optional parameters.\n     * @param {boolean} trustAllHosts  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful since Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\n     * @returns {Promise<FileUploadResult>} Returns a Promise that resolves to a FileUploadResult and rejects with FileTransferError.\n     */\n    upload(fileUrl: string, url: string, options?: FileUploadOptions, trustAllHosts?: boolean): Promise<FileUploadResult> {\n        let response: FileUploadResult;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Downloads a file from server.\n     *\n     * @param {string} source  URL of the server to download the file, as encoded by encodeURI().\n     * @param {string} target  Filesystem url representing the file on the device. For backwards compatibility, this can also be the full path of the file on the device.\n     * @param {boolean} trustAllHosts  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful because Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\n     * @param {object} Optional parameters, currently only supports headers (such as Authorization (Basic Authentication), etc).\n     * @returns {Promise<any>} Returns a Promise that resolves to a FileEntry object.\n     */\n    download(source: string, target: string, trustAllHosts?: boolean, options?: {\n        [s: string]: any;\n    }): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Registers a listener that gets called whenever a new chunk of data is transferred.\n     * @param listener {function} Listener that takes a progress event.\n     */\n    onProgress(listener: (event: ProgressEvent) => any): void {};\n    /**\n     * Aborts an in-progress transfer. The onerror callback is passed a FileTransferError\n     * object which has an error code of FileTransferError.ABORT_ERR.\n     */\n    abort(): void {};\n}\n"]}