{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/native-audio/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,4BAA4B,CAAC;AAEzD;IAAqC,mCAAW;IAAhD;;IA8EA,CAAC;IA7EG;;;;;OAKG;IACH,uCAAa,GAAb,UAAc,EAAU,EAAE,SAAiB;QACvC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;;OAQG;IACH,wCAAc,GAAd,UAAe,EAAU,EAAE,SAAiB,EAAE,MAAc,EAAE,MAAc,EAAE,KAAa;QACvF,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,8BAAI,GAAJ,UAAK,EAAU,EAAE,gBAA2B;QACxC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,8BAAI,GAAJ,UAAK,EAAU;QACX,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,8BAAI,GAAJ,UAAK,EAAU;QACX,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,gCAAM,GAAN,UAAO,EAAU;QACb,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,kDAAwB,GAAxB,UAAyB,EAAU,EAAE,MAAc;QAC/C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,sBAAC;AAAD,CA9EA,AA8EC,CA9EoC,WAAW,GA8E/C","file":"index.js","sourceRoot":"","sourcesContent":["import { NativeAudio } from '@ionic-native/native-audio';\n\nexport class NativeAudioMock extends NativeAudio {\n    /**\n     * Loads an audio file into memory. Optimized for short clips / single shots (up to five seconds). Cannot be stopped / looped.\n     * @param id {string} unique ID for the audio file\n     * @param assetPath {string}  the relative path or absolute URL (inluding http://) to the audio asset.\n     * @returns {Promise<any>}\n     */\n    preloadSimple(id: string, assetPath: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Loads an audio file into memory. Optimized for background music / ambient sound. Uses highlevel native APIs with a larger footprint. (iOS: AVAudioPlayer). Can be stopped / looped and used with multiple voices. Can be faded in and out using the delay parameter.\n     * @param id {string} unique ID for the audio file\n     * @param assetPath {string}  the relative path or absolute URL (inluding http://) to the audio asset.\n     * @param volume {number} the volume of the preloaded sound (0.1 to 1.0)\n     * @param voices {number} the number of multichannel voices available\n     * @param delay {number}\n     * @returns {Promise<any>}\n     */\n    preloadComplex(id: string, assetPath: string, volume: number, voices: number, delay: number): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Plays an audio asset\n     * @param id {string} unique ID for the audio file\n     * @param completeCallback {Function} optional. Callback to be invoked when audio is done playing\n     * @returns {Promise<any>}\n     */\n    play(id: string, completeCallback?: Function): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Stops playing an audio\n     * @param id {string} unique ID for the audio file\n     * @returns {Promise<any>}\n     */\n    stop(id: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Loops an audio asset infinitely, this only works for complex assets\n     * @param id {string} unique ID for the audio file\n     * @return {Promise<any>}\n     */\n    loop(id: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Unloads an audio file from memory\n     * @param id {string} unique ID for the audio file\n     * @returns {Promise<any>}\n     */\n    unload(id: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Changes the volume for preloaded complex assets.\n     * @param id {string} unique ID for the audio file\n     * @param volume {number} the volume of the audio asset (0.1 to 1.0)\n     * @returns {Promise<any>}\n     */\n    setVolumeForComplexAsset(id: string, volume: number): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n}\n"]}