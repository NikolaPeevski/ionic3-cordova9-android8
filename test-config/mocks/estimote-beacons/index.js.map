{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/estimote-beacons/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { EstimoteBeacons } from '@ionic-native/estimote-beacons';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nexport interface EstimoteBeaconRegion {\n    state?: string;\n    major: number;\n    minor: number;\n    identifier?: string;\n    uuid: string;\n}\n\nexport class EstimoteBeaconsMock extends EstimoteBeacons {\n    /** Proximity value */\n    ProximityUnknown: number;\n    /** Proximity value */\n    ProximityImmediate: number;\n    /** Proximity value */\n    ProximityNear: number;\n    /** Proximity value */\n    ProximityFar: number;\n    /** Beacon colour */\n    BeaconColorUnknown: number;\n    /** Beacon colour */\n    BeaconColorMintCocktail: number;\n    /** Beacon colour */\n    BeaconColorIcyMarshmallow: number;\n    /** Beacon colour */\n    BeaconColorBlueberryPie: number;\n    /**\n     * Beacon colour.\n     */\n    BeaconColorSweetBeetroot: number;\n    /** Beacon colour */\n    BeaconColorCandyFloss: number;\n    /** Beacon colour */\n    BeaconColorLemonTart: number;\n    /** Beacon colour */\n    BeaconColorVanillaJello: number;\n    /** Beacon colour */\n    BeaconColorLiquoriceSwirl: number;\n    /** Beacon colour */\n    BeaconColorWhite: number;\n    /** Beacon colour */\n    BeaconColorTransparent: number;\n    /** Region state */\n    RegionStateUnknown: string;\n    /** Region state */\n    RegionStateOutside: string;\n    /** Region state */\n    RegionStateInside: string;\n    /**\n     * Ask the user for permission to use location services\n     * while the app is in the foreground.\n     * You need to call this function or requestAlwaysAuthorization\n     * on iOS 8+.\n     * Does nothing on other platforms.\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.requestWhenInUseAuthorization().then(\n     *   () => { console.log('on success'); },\n     *   () => { console.log('on error'); }\n     * );\n     * ```\n     *\n     * @see {@link https://community.estimote.com/hc/en-us/articles/203393036-Estimote-SDK-and-iOS-8-Location-Services|Estimote SDK and iOS 8 Location Services}\n     * @returns {Promise<any>}\n     */\n    requestWhenInUseAuthorization(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Ask the user for permission to use location services\n     * whenever the app is running.\n     * You need to call this function or requestWhenInUseAuthorization\n     * on iOS 8+.\n     * Does nothing on other platforms.\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.requestAlwaysAuthorization().then(\n     *   () => { console.log('on success'); },\n     *   () => { console.log('on error'); }\n     * );\n     * ```\n     *\n     * @see {@link https://community.estimote.com/hc/en-us/articles/203393036-Estimote-SDK-and-iOS-8-Location-Services|Estimote SDK and iOS 8 Location Services}\n     * @returns {Promise<any>}\n     */\n    requestAlwaysAuthorization(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Get the current location authorization status.\n     * Implemented on iOS 8+.\n     * Does nothing on other platforms.\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.authorizationStatus().then(\n     *   (result) => { console.log('Location authorization status: ' + result); },\n     *   (errorMessage) => { console.log('Error: ' + errorMessage); }\n     * );\n     * ```\n     *\n     * @see {@link https://community.estimote.com/hc/en-us/articles/203393036-Estimote-SDK-and-iOS-8-Location-Services|Estimote SDK and iOS 8 Location Services}\n     * @returns {Promise<any>}\n     */\n    authorizationStatus(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Start advertising as a beacon.\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.startAdvertisingAsBeacon('B9407F30-F5F8-466E-AFF9-25556B57FE6D', 1, 1, 'MyRegion')\n     *    .then(() => { console.log('Beacon started'); });\n     * setTimeout(() => {\n     *   EstimoteBeacons.stopAdvertisingAsBeacon().then((result) => { console.log('Beacon stopped'); });\n     * }, 5000);\n     * ```\n     * @param uuid {string} UUID string the beacon should advertise (mandatory).\n     * @param major {number} Major value to advertise (mandatory).\n     * @param minor {number} Minor value to advertise (mandatory).\n     * @param regionId {string} Identifier of the region used to advertise (mandatory).\n     * @returns {Promise<any>}\n     */\n    startAdvertisingAsBeacon(uuid: string, major: number, minor: number, regionId: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Stop advertising as a beacon.\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.startAdvertisingAsBeacon('B9407F30-F5F8-466E-AFF9-25556B57FE6D', 1, 1, 'MyRegion')\n     *    .then(() => { console.log('Beacon started'); });\n     * setTimeout(() => {\n     *   EstimoteBeacons.stopAdvertisingAsBeacon().then((result) => { console.log('Beacon stopped'); });\n     * }, 5000);\n     * ```\n     * @returns {Promise<any>}\n     */\n    stopAdvertisingAsBeacon(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Enable analytics.\n     *\n     * @see {@link http://estimote.github.io/iOS-SDK/Classes/ESTConfig.html|Further details}\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.enableAnalytics(true).then(() => { console.log('Analytics enabled'); });\n     * ```\n     * @param enable {number} Boolean value to turn analytics on or off (mandatory).\n     * @returns {Promise<any>}\n     */\n    enableAnalytics(enable: boolean): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n    * Test if analytics is enabled.\n    *\n    * @see {@link http://estimote.github.io/iOS-SDK/Classes/ESTConfig.html|Further details}\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.isAnalyticsEnabled().then((enabled) => { console.log('Analytics enabled: ' + enabled); });\n     * ```\n     * @returns {Promise<any>}\n     */\n    isAnalyticsEnabled(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n    * Test if App ID and App Token is set.\n    *\n    * @see {@link http://estimote.github.io/iOS-SDK/Classes/ESTConfig.html|Further details}\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.isAuthorized().then((isAuthorized) => { console.log('App ID and App Token is set: ' + isAuthorized); });\n     * ```\n     * @returns {Promise<any>}\n     */\n    isAuthorized(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n    * Set App ID and App Token.\n    *\n    * @see {@link http://estimote.github.io/iOS-SDK/Classes/ESTConfig.html|Further details}\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.setupAppIDAndAppToken('MyAppID', 'MyAppToken').then(() => { console.log('AppID and AppToken configured!'); });\n     * ```\n     * @param appID {string} The App ID (mandatory).\n     * @param appToken {string} The App Token (mandatory).\n     * @returns {Promise<any>}\n     */\n    setupAppIDAndAppToken(appID: string, appToken: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Start scanning for all nearby beacons using CoreBluetooth (no region object is used).\n     * Available on iOS.\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.startEstimoteBeaconDiscovery().subscribe(beacons => {\n     *   console.log(JSON.stringify(beacons));\n     * });\n     * setTimeout(() => {\n     *   EstimoteBeacons.stopEstimoteBeaconDiscovery().then(() => { console.log('scan stopped'); });\n     * }, 5000);\n     * ```\n     * @returns {Observable<any>} Returns an Observable that notifies of each beacon discovered.\n     */\n    startEstimoteBeaconDiscovery(): Observable<any> {\n        return Observable.create((observer: Observer<any>) => {\n            observer.next('');\n            observer.complete();\n        });\n    };\n    /**\n     * Stop CoreBluetooth scan. Available on iOS.\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.startEstimoteBeaconDiscovery().subscribe(beacons => {\n     *   console.log(JSON.stringify(beacons));\n     * });\n     * setTimeout(() => {\n     *   EstimoteBeacons.stopEstimoteBeaconDiscovery().then(() => { console.log('scan stopped'); });\n     * }, 5000);\n     * ```\n     * @returns {Promise<any>}\n     */\n    stopEstimoteBeaconDiscovery(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Start ranging beacons. Available on iOS and Android.\n     *\n     * @usage\n     * ```\n     * let region: EstimoteBeaconRegion = {} // Empty region matches all beacons.\n     * EstimoteBeacons.startRangingBeaconsInRegion(region).subscribe(info => {\n     *   console.log(JSON.stringify(info));\n     * });\n     * setTimeout(() => {\n     *   EstimoteBeacons.stopRangingBeaconsInRegion(region).then(() => { console.log('scan stopped'); });\n     * }, 5000);\n     * ```\n     * @param region {EstimoteBeaconRegion} Dictionary with region properties (mandatory).\n     * @returns {Observable<any>} Returns an Observable that notifies of each beacon discovered.\n     */\n    startRangingBeaconsInRegion(region: EstimoteBeaconRegion): Observable<any> {\n        return Observable.create((observer: Observer<any>) => {\n            observer.next('');\n            observer.complete();\n        });\n    };\n    /**\n     * Stop ranging beacons. Available on iOS and Android.\n     *\n     * @usage\n     * ```\n     * let region: EstimoteBeaconRegion = {} // Empty region matches all beacons.\n     * EstimoteBeacons.startRangingBeaconsInRegion(region).subscribe(info => {\n     *   console.log(JSON.stringify(info));\n     * });\n     * setTimeout(() => {\n     *   EstimoteBeacons.stopRangingBeaconsInRegion(region).then(() => { console.log('scan stopped'); });\n     * }, 5000);\n     * ```\n     * @param region {EstimoteBeaconRegion} Dictionary with region properties (mandatory).\n     * @returns {Promise<any>}\n     */\n    stopRangingBeaconsInRegion(region: EstimoteBeaconRegion): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Start ranging secure beacons. Available on iOS.\n     * This function has the same parameters/behaviour as\n     * {@link EstimoteBeacons.startRangingBeaconsInRegion}.\n     * To use secure beacons set the App ID and App Token using\n     * {@link EstimoteBeacons.setupAppIDAndAppToken}.\n     * @returns {Observable<any>}\n     */\n    startRangingSecureBeaconsInRegion(region: EstimoteBeaconRegion): Observable<any> {\n        return Observable.create((observer: Observer<any>) => {\n            observer.next('');\n            observer.complete();\n        });\n    };\n    /**\n     * Stop ranging secure beacons. Available on iOS.\n     * This function has the same parameters/behaviour as\n     * {@link EstimoteBeacons.stopRangingBeaconsInRegion}.\n     * @returns {Promise<any>}\n     */\n    stopRangingSecureBeaconsInRegion(region: EstimoteBeaconRegion): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Start monitoring beacons. Available on iOS and Android.\n     *\n     * @usage\n     * ```\n     * let region: EstimoteBeaconRegion = {} // Empty region matches all beacons.\n     * EstimoteBeacons.startMonitoringForRegion(region).subscribe(state => {\n     *   console.log('Region state: ' + JSON.stringify(state));\n     * });\n     * ```\n     * @param region {EstimoteBeaconRegion} Dictionary with region properties (mandatory).\n     * @param [notifyEntryStateOnDisplay=false] {boolean} Set to true to detect if you\n     * are inside a region when the user turns display on, see\n     * {@link https://developer.apple.com/library/prerelease/ios/documentation/CoreLocation/Reference/CLBeaconRegion_class/index.html#//apple_ref/occ/instp/CLBeaconRegion/notifyEntryStateOnDisplay|iOS documentation}\n     * for further details (iOS only).\n     * @returns {Observable<any>} Returns an Observable that notifies of each region state discovered.\n     */\n    startMonitoringForRegion(region: EstimoteBeaconRegion, notifyEntryStateOnDisplay: boolean): Observable<any> {\n        return Observable.create((observer: Observer<any>) => {\n            observer.next('');\n            observer.complete();\n        });\n    };\n    /**\n     * Stop monitoring beacons. Available on iOS and Android.\n     *\n     * @usage\n     * ```\n     * let region: EstimoteBeaconRegion = {} // Empty region matches all beacons.\n     * EstimoteBeacons.stopMonitoringForRegion(region).then(() => { console.log('monitoring is stopped'); });\n     * ```\n     * @param region {EstimoteBeaconRegion} Dictionary with region properties (mandatory).\n     * @returns {Promise<any>}\n     */\n    stopMonitoringForRegion(region: EstimoteBeaconRegion): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Start monitoring secure beacons. Available on iOS.\n     * This function has the same parameters/behaviour as\n     * EstimoteBeacons.startMonitoringForRegion.\n     * To use secure beacons set the App ID and App Token using\n     * {@link EstimoteBeacons.setupAppIDAndAppToken}.\n     * @see {@link EstimoteBeacons.startMonitoringForRegion}\n     * @param region {EstimoteBeaconRegion} Region\n     * @param notifyEntryStateOnDisplay {boolean}\n     * @returns {Observable<any>}\n     */\n    startSecureMonitoringForRegion(region: EstimoteBeaconRegion, notifyEntryStateOnDisplay: boolean): Observable<any> {\n        return Observable.create((observer: Observer<any>) => {\n            observer.next('');\n            observer.complete();\n        });\n    };\n    /**\n    * Stop monitoring secure beacons. Available on iOS.\n    * This function has the same parameters/behaviour as\n    * {@link EstimoteBeacons.stopMonitoringForRegion}.\n    * @param region {EstimoteBeaconRegion} Region\n    * @returns {Promise<any>}\n    */\n    stopSecureMonitoringForRegion(region: EstimoteBeaconRegion): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Connect to Estimote Beacon. Available on Android.\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.connectToBeacon(FF:0F:F0:00:F0:00);\n     * ```\n     * ```\n     * EstimoteBeacons.connectToBeacon({\n     *     proximityUUID: '000000FF-F00F-0FF0-F000-000FF0F00000',\n     *     major: 1,\n     *     minor: 1\n     *   });\n     * ```\n     * @param beacon {Beacon} Beacon to connect to.\n     * @returns {Promise<any>}\n     */\n    connectToBeacon(beacon: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Disconnect from connected Estimote Beacon. Available on Android.\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.disconnectConnectedBeacon();\n     * ```\n     * @returns {Promise<any>}\n     */\n    disconnectConnectedBeacon(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Write proximity UUID to connected Estimote Beacon. Available on Android.\n     *\n     * @usage\n     * ```\n     * // Example that writes constant ESTIMOTE_PROXIMITY_UUID\n     * EstimoteBeacons.writeConnectedProximityUUID(ESTIMOTE_PROXIMITY_UUID);\n     *\n     * @param uuid {string} String to write as new UUID\n     * @returns {Promise<any>}\n     */\n    writeConnectedProximityUUID(uuid: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Write major to connected Estimote Beacon. Available on Android.\n     *\n     * @usage\n     * ```\n     * // Example that writes 1\n     * EstimoteBeacons.writeConnectedMajor(1);\n     *\n     * @param major {number} number to write as new major\n     * @returns {Promise<any>}\n     */\n    writeConnectedMajor(major: number): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Write minor to connected Estimote Beacon. Available on Android.\n     *\n     * @usage\n     * ```\n     * // Example that writes 1\n     * EstimoteBeacons.writeConnectedMinor(1);\n     *\n     * @param minor {number} number to write as new minor\n     * @returns {Promise<any>}\n     */\n    writeConnectedMinor(minor: number): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n}\n"]}