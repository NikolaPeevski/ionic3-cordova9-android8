{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/dialog/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAahD;IAAiC,+BAAO;IAAxC;;IA6CA,CAAC;IA5CD;;;;;;WAMO;IACH,2BAAK,GAAL,UAAM,OAAe,EAAE,KAAc,EAAE,UAAmB;QACtD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,6BAAO,GAAP,UAAQ,OAAe,EAAE,KAAc,EAAE,YAAuB;QAC5D,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,CAAC,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;OAOG;IACH,4BAAM,GAAN,UAAO,OAAgB,EAAE,KAAc,EAAE,YAAuB,EAAE,WAAoB;QAClF,IAAI,SAAgC,CAAC;QACrC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,SAAS,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IAEP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,0BAAI,GAAJ,UAAK,KAAa,IAAS,CAAC;IAAA,CAAC;IACjC,kBAAC;AAAD,CA7CA,AA6CC,CA7CgC,OAAO,GA6CvC","file":"index.js","sourceRoot":"","sourcesContent":["import { Dialogs } from '@ionic-native/dialogs';\n\nexport interface DialogsPromptCallback {\n    /**\n     * The index of the pressed button. (Number) Note that the index uses one-based indexing, so the value is 1, 2, 3, etc.\n     */\n    buttonIndex: number;\n    /**\n     * The text entered in the prompt dialog box. (String)\n     */\n    input1: string;\n}\n\nexport class DialogsMock extends Dialogs {\n/**\n     * Shows a custom alert or dialog box.\n     * @param {string} message Dialog message.\n     * @param {string} title Dialog title. (Optional, defaults to Alert)\n     * @param {string} buttonName Button name. (Optional, defaults to OK)\n     * @returns {Promise<any>} Returns a blank promise once the user has dismissed the alert.\n     */\n    alert(message: string, title?: string, buttonName?: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Displays a customizable confirmation dialog box.\n     * @param {string} message Dialog message.\n     * @param {string} title Dialog title. (Optional, defaults to Confirm)\n     * @param {Array<string>} buttonLabels Array of strings specifying button labels. (Optional, defaults to [OK,Cancel])\n     * @returns {Promise<number>} Returns a promise that resolves the button index that was clicked, or 0 if the user has dismissed the dialog by clicking outside the dialog box. Note that the index use one-based indexing.\n     */\n    confirm(message: string, title?: string, buttonLabels?: string[]): Promise<number> {\n        return new Promise((resolve, reject) => {\n            resolve(1);\n        });\n    };\n    /**\n     * Displays a native dialog box that is more customizable than the browser's prompt function.\n     * @param {string} message Dialog message.\n     * @param {string} title Dialog title. (Optional, defaults to Prompt)\n     * @param {Array<string>} buttonLabels  Array of strings specifying button labels. (Optional, defaults to [\"OK\",\"Cancel\"])\n     * @param {string} defaultText Default textbox input value.  (Optional, Default: empty string)\n     * @returns {Promise<DialogsPromptCallback>} Returns a promise that resolves an object with the button index clicked and the text entered\n     */\n    prompt(message?: string, title?: string, buttonLabels?: string[], defaultText?: string): Promise<DialogsPromptCallback> {\n        let theResult: DialogsPromptCallback;\n        return new Promise((resolve, reject) => {\n            resolve(theResult);\n        });\n\n    };\n    /**\n     * The device plays a beep sound.\n     * @param {numbers} times The number of times to repeat the beep.\n     */\n    beep(times: number): void {};\n}\n"]}