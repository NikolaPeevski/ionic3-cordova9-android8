{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/globalization/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Globalization } from '@ionic-native/globalization';\n\nexport class GlobalizationMock extends Globalization {\n    /**\n        * Returns the BCP-47 compliant language identifier tag to the successCallback with a properties object as a parameter. That object should have a value property with a String value.\n        * @returns {Promise<{value: string}>}\n        */\n    getPreferredLanguage(): Promise<{ value: string; }> {\n        let theResult = { value: '' };\n        return new Promise((resolve, reject) => {\n            resolve(theResult);\n        });\n    };\n    /**\n     * Returns the BCP 47 compliant locale identifier string to the successCallback with a properties object as a parameter.\n     * @returns {Promise<{value: string}>}\n     */\n    getLocaleName(): Promise<{ value: string; }> {\n        let theResult = { value: '' };\n        return new Promise((resolve, reject) => {\n            resolve(theResult);\n        });\n    };\n    /**\n     * Converts date to string\n     * @param {Date} date Date you wish to convert\n     * @param options Options for the converted date. Length, selector.\n     * @returns {Promise<{value: string}>} Returns a promise when the date has been converted.\n     */\n    dateToString(date: Date, options: { formatLength: string; selector: string; }): Promise<{ value: string; }> {\n        let theResult = { value: '' };\n        return new Promise((resolve, reject) => {\n            resolve(theResult);\n        });\n    };\n    /**\n     * Parses a date formatted as a string, according to the client's user preferences and calendar using the time zone of the client, and returns the corresponding date object.\n     * @param {string} dateString Date as a string to be converted\n     * @param options Options for the converted date. Length, selector.\n     * @returns {Promise<{ year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number }>} Returns a promise when the date has been converted.\n     */\n    stringToDate(dateString: string, options: {\n        formatLength: string;\n        selector: string;\n    }): Promise<{\n        year: number;\n        month: number;\n        day: number;\n        hour: number;\n        minute: number;\n        second: number;\n        millisecond: number;\n    }> {\n        let theResult = { year: 0, month: 0, day: 0, hour: 0, minute: 0, second: 0, millisecond: 0 };\n        return new Promise((resolve, reject) => {\n            resolve(theResult);\n        });\n    };\n    /**\n     * Returns a pattern string to format and parse dates according to the client's user preferences.\n     * @param options Object with the format length and selector\n     * @returns {Promise<{ pattern: string, timezone: string, utf_offset: number, dst_offset: number }>} Returns a promise.\n     */\n    getDatePattern(options: {\n        formatLength: string;\n        selector: string;\n    }): Promise<{\n        pattern: string;\n        timezone: string;\n        utf_offset: number;\n        dst_offset: number;\n    }> {\n        let theResult = { pattern: '', timezone: '', utf_offset: 0, dst_offset: 0 };\n        return new Promise((resolve, reject) => {\n            resolve(theResult);\n        });\n    };\n    /**\n     * Returns an array of the names of the months or days of the week, depending on the client's user preferences and calendar.\n     * @param options Object with type (narrow or wide) and item (month or days).\n     * @returns {Promise<{value: Array<string>}>} Returns a promise.\n     */\n    getDateNames(options: {\n        type: string;\n        item: string;\n    }): Promise<{\n        value: Array<string>;\n    }> {\n        let theResult = { value: [''] };\n        return new Promise((resolve, reject) => {\n            resolve(theResult);\n        });\n    };\n    /**\n     * Indicates whether daylight savings time is in effect for a given date using the client's time zone and calendar.\n     * @param {data} date Date to process\n     * @returns {Promise<{dst: string}>} reutrns a promise with the value\n     */\n    isDayLightSavingsTime(date: Date): Promise<{\n        dst: string;\n    }> {\n        let theResult = { dst: '' };\n        return new Promise((resolve, reject) => {\n            resolve(theResult);\n        });\n    };\n    /**\n     * Returns the first day of the week according to the client's user preferences and calendar.\n     * @returns {Promise<{value: string}>} returns a promise with the value\n     */\n    getFirstDayOfWeek(): Promise<{\n        value: string;\n    }> {\n        let theResult = { value: '' };\n        return new Promise((resolve, reject) => {\n            resolve(theResult);\n        });\n    };\n    /**\n     * Returns a number formatted as a string according to the client's user preferences.\n     * @param numberToConvert {Number} The number to convert\n     * @param options {Object} Object with property `type` that can be set to: decimal, percent, or currency.\n     */\n    numberToString(numberToConvert: number, options: {\n        type: string;\n    }): Promise<{\n        value: string;\n    }> {\n        let theResult = { value: '' };\n        return new Promise((resolve, reject) => {\n            resolve(theResult);\n        });\n    };\n    /**\n     *\n     * @param {string} stringToConvert String you want to conver to a number\n     * @param options  The type of number you want to return. Can be decimal, percent, or currency.\n     * @returns {Promise<{ value: number | string }>} Returns a promise with the value.\n     */\n    stringToNumber(stringToConvert: string, options: {\n        type: string;\n    }): Promise<{\n        value: number | string;\n    }> {\n        let theResult = { value: '' };\n        return new Promise((resolve, reject) => {\n            resolve(theResult);\n        });\n    };\n    /**\n     * Returns a pattern string to format and parse numbers according to the client's user preferences.\n     * @param options Can be decimal, percent, or currency.\n     * @returns {Promise<{ pattern: string, symbol: string, fraction: number, rounding: number, positive: string, negative: string, decimal: string, grouping: string }>}\n     */\n    getNumberPattern(options: {\n        type: string;\n    }): Promise<{\n        pattern: string;\n        symbol: string;\n        fraction: number;\n        rounding: number;\n        positive: string;\n        negative: string;\n        decimal: string;\n        grouping: string;\n    }> {\n        let theResult = { pattern: '', symbol: '', fraction: 0, rounding: 0, positive: '', negative: '', decimal: '', grouping: '' };\n        return new Promise((resolve, reject) => {\n            resolve(theResult);\n        });\n    };\n    /**\n     * Returns a pattern string to format and parse currency values according to the client's user preferences and ISO 4217 currency code.\n     * @param {string} currencyCode Currency Code.A\n     * @returns {Promise<{ pattern: string, code: string, fraction: number, rounding: number, decimal: number, grouping: string }>}\n     */\n    getCurrencyPattern(currencyCode: string): Promise<{\n        pattern: string;\n        code: string;\n        fraction: number;\n        rounding: number;\n        decimal: number;\n        grouping: string;\n    }> {\n        let theResult = { pattern: '', code: '', fraction: 0, rounding: 0, decimal: 0, grouping: '' };\n        return new Promise((resolve, reject) => {\n            resolve(theResult);\n        });\n    };\n}\n"]}