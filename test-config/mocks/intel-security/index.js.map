{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/intel-security/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { IntelSecurity, IntelSecurityData, IntelSecurityStorage } from '@ionic-native/intel-security';\n\nexport interface IntelSecurityDataOptions {\n    /** Non-empty string. **/\n    data: String;\n    /** Tag text.  */\n    tag?: String;\n    /** Valid secure data instance ID. */\n    extraKey?: Number;\n    /** Application access control policy. */\n    appAccessControl?: Number;\n    /** Device locality policy. */\n    deviceLocality?: Number;\n    /** Sensitivity level policy. */\n    sensitivityLevel?: Number;\n    /** Disallow sealed blob access. */\n    noStore?: Boolean;\n    /** Disallow plain-text data access. */\n    noRead?: Boolean;\n    /** Creator unique ID. */\n    creator?: Number;\n    /** Array of owners unique IDs. */\n    owners?: Number[];\n    /** List of trusted web domains. */\n    webOwners?: String[];\n}\n\nexport  class IntelSecurityMock extends IntelSecurity {\n    /**\n     * returns an IntelSecurityStorage object\n     * @type {IntelSecurityStorage}\n     */\n    storage: IntelSecurityStorageMock;\n    /**\n     * Returns an IntelSecurityData object\n     * @type {IntelSecurityData}\n     */\n    data: IntelSecurityDataMock;\n}\n/**\n * @hidden\n */\nexport class IntelSecurityDataMock extends IntelSecurityData {\n    /**\n    * This creates a new instance of secure data using plain-text data.\n    * @param options {IntelSecurityDataOptions}\n    * @returns {Promise<any>} Returns a Promise that resolves with the instanceID of the created data instance, or rejects with an error.\n    */\n    createFromData(options: IntelSecurityDataOptions): Promise<Number> {\n        let response: Number;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * This creates a new instance of secure data (using sealed data)\n     * @param options {Object}\n     * @param options.sealedData {string} Sealed data in string format.\n     * @returns {Promise<any>} Returns a Promise that resolves with the instanceID of the created data instance, or rejects with an error.\n     */\n    createFromSealedData(options: {\n        sealedData: string;\n    }): Promise<Number> {\n        let response: Number;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * This returns the plain-text data of the secure data instance.\n     * @param instanceID {Number} Secure data instance ID.\n     * @returns {Promise<string>} Returns a Promise that resolves to the data as plain-text, or rejects with an error.\n     */\n    getData(instanceID: Number): Promise<string> {\n        let response: string = '';\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * This returns the sealed chunk of a secure data instance.\n     * @param instanceID {any} Secure data instance ID.\n     * @returns {Promise<any>} Returns a Promise that resolves to the sealed data, or rejects with an error.\n     */\n    getSealedData(instanceID: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * This returns the tag of the secure data instance.\n     * @param instanceID {any} Secure data instance ID.\n     * @returns {Promise<string>} Returns a Promise that resolves to the tag, or rejects with an error.\n     */\n    getTag(instanceID: any): Promise<string> {\n        let response: string = '';\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * This returns the data policy of the secure data instance.\n     * @param instanceID {any} Secure data instance ID.\n     * @returns {Promise<any>} Returns a promise that resolves to the policy object, or rejects with an error.\n     */\n    getPolicy(instanceID: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * This returns an array of the data owners unique IDs.\n     * @param instanceID {any} Secure data instance ID.\n     * @returns {Promise<Array>} Returns a promise that resolves to an array of owners' unique IDs, or rejects with an error.\n     */\n    getOwners(instanceID: any): Promise<Array<any>> {\n        let response: Array<any> = [];\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * This returns the data creator unique ID.\n     * @param instanceID {any} Secure data instance ID.\n     * @returns {Promise<Number>} Returns a promsie that resolves to the creator's unique ID, or rejects with an error.\n     */\n    getCreator(instanceID: any): Promise<Number> {\n        let response: Number;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * This returns an array of the trusted web domains of the secure data instance.\n     * @param instanceID {any} Secure data instance ID.\n     * @returns {Promise<Array>} Returns a promise that resolves to a list of web owners, or rejects with an error.\n     */\n    getWebOwners(instanceID: any): Promise<Array<any>> {\n        let response: Array<any> = [];\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * This changes the extra key of a secure data instance. To successfully replace the extra key, the calling application must have sufficient access to the plain-text data.\n     * @param options {Object}\n     * @param options.instanceID {any} Secure data instance ID.\n     * @param options.extraKey {Number} Extra sealing secret for secure data instance.\n     * @returns {Promise<any>} Returns a promise that resolves with no parameters, or rejects with an error.\n     */\n    changeExtraKey(options: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * This releases a secure data instance.\n     * @param instanceID {any} Secure data instance ID.\n     * @returns {Promise<any>} Returns a promise that resovles with no parameters, or rejects with an error.\n     */\n    destroy(instanceID: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n}\n/**\n * @hidden\n */\nexport class IntelSecurityStorageMock extends IntelSecurityStorage {\n    /**\n     * This deletes a secure storage resource (indicated by id).\n     * @param options {Object}\n     * @param options.id {String} Storage resource identifier.\n     * @param [options.storageType] {Number} Storage type.\n     * @returns {Promise<any>} Returns a Promise that resolves with no parameters, or rejects with an error.\n     */\n    delete(options: {\n        id: string;\n        storageType?: Number;\n    }): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * This reads the data from secure storage (indicated by id) and creates a new secure data instance.\n     * @param options {Object}\n     * @param options.id {String} Storage resource identifier.\n     * @param [options.storageType] {Number} Storage type.\n     * @param [options.extraKey] {Number} Valid secure data instance ID.\n     * @returns {Promise<Number>} Returns a Promise that resolves with the instance ID of the created secure data instance, or rejects with an error.\n     */\n    read(options: {\n        id: string;\n        storageType?: Number;\n        extraKey?: Number;\n    }): Promise<Number> {\n        let response: Number;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * This writes the data contained in a secure data instance into secure storage.\n     * @param options {Object}\n     * @param options.id {String} Storage resource identifier.\n     * @param options.instanceID {Number} Valid secure data instance ID\n     * @param [options.storageType] {Number} Storage type.\n     * @returns {Promise<any>} Returns a Promise that resolves with no parameters, or rejects with an error.\n     */\n    write(options: {\n        id: String;\n        instanceID: Number;\n        storageType?: Number;\n    }): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n}\n"]}