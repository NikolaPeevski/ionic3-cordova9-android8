{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/toast/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAC5C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAsC7C;IAA+B,6BAAK;IAApC;;IA2GA,CAAC;IA1GG;;;;;;;WAOO;IACP,wBAAI,GAAJ,UAAK,OAAe,EAAE,QAAgB,EAAE,QAAgB;QACpD,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,wBAAI,GAAJ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;;;;OAUG;IACH,mCAAe,GAAf,UAAgB,OAAqB;QACjC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,gCAAY,GAAZ,UAAa,OAAe;QACxB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,mCAAe,GAAf,UAAgB,OAAe;QAC3B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,mCAAe,GAAf,UAAgB,OAAe;QAC3B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,+BAAW,GAAX,UAAY,OAAe;QACvB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,kCAAc,GAAd,UAAe,OAAe;QAC1B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,kCAAc,GAAd,UAAe,OAAe;QAC1B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAE,UAAC,QAAuB;YAC9C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,gBAAC;AAAD,CA3GA,AA2GC,CA3G8B,KAAK,GA2GnC","file":"index.js","sourceRoot":"","sourcesContent":["import { Toast } from '@ionic-native/toast';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nexport interface ToastOptions {\n    /**\n     * Message to display\n     */\n    message?: string;\n    /**\n     * Duration in ms to show\n     */\n    duration?: number;\n    /**\n     * Position\n     */\n    position?: string;\n    /**\n     * Add negative value to move it up a bit\n     */\n    addPixelsY?: number;\n    /**\n     * Pass JSON object to be sent back in success callback\n     */\n    data?: any;\n    /**\n     * Styling\n     */\n    styling?: {\n        opacity?: number;\n        backgroundColor?: string;\n        textColor?: string;\n        cornerRadius?: number;\n        horizontalPadding?: number;\n        verticalPadding?: number;\n    };\n}\n\n\nexport class ToastMock extends Toast {\n    /**\n         * Show a native toast for the given duration at the specified position.\n         *\n         * @param {string} message  The message to display.\n         * @param {string} duration  Duration to show the toast, either 'short', 'long' or any number of milliseconds: '1500'.\n         * @param {string} position  Where to position the toast, either 'top', 'center', or 'bottom'.\n         * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n         */\n    show(message: string, duration: string, position: string): Observable<any> {\n        return Observable.create( (observer: Observer<any>) => {\n            observer.next('');\n            observer.complete();\n        });\n    };\n    /**\n     * Manually hide any currently visible toast.\n     * @returns {Promise<any>} Returns a Promise that resolves on success.\n     */\n    hide(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Show a native toast with the given options.\n     *\n     * @param {Object} options  Options for showing a toast. Available options:\n     *   message  The message to display.\n     *   duration  Duration to show the toast, either 'short', 'long' or any number of milliseconds: '1500'.\n     *   position  Where to position the toast, either 'top', 'center', or 'bottom'.\n     *   addPixelsY  Offset in pixels to move the toast up or down from its specified position.\n     *\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    showWithOptions(options: ToastOptions): Observable<any> {\n        return Observable.create( (observer: Observer<any>) => {\n            observer.next('');\n            observer.complete();\n        });\n    };\n    /**\n     * Shorthand for `show(message, 'short', 'top')`.\n     * @param message {string}\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    showShortTop(message: string): Observable<any> {\n        return Observable.create( (observer: Observer<any>) => {\n            observer.next('');\n            observer.complete();\n        });\n    };\n    /**\n     * Shorthand for `show(message, 'short', 'center')`.\n     * @param message {string}\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    showShortCenter(message: string): Observable<any> {\n        return Observable.create( (observer: Observer<any>) => {\n            observer.next('');\n            observer.complete();\n        });\n    };\n    /**\n     * Shorthand for `show(message, 'short', 'bottom')`.\n     * @param message {string}\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    showShortBottom(message: string): Observable<any> {\n        return Observable.create( (observer: Observer<any>) => {\n            observer.next('');\n            observer.complete();\n        });\n    };\n    /**\n     * Shorthand for `show(message, 'long', 'top')`.\n     * @param message {string}\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    showLongTop(message: string): Observable<any> {\n        return Observable.create( (observer: Observer<any>) => {\n            observer.next('');\n            observer.complete();\n        });\n    };\n    /**\n     * Shorthand for `show(message, 'long', 'center')`.\n     * @param message {string}\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    showLongCenter(message: string): Observable<any> {\n        return Observable.create( (observer: Observer<any>) => {\n            observer.next('');\n            observer.complete();\n        });\n    };\n    /**\n     * Shorthand for `show(message, 'long', 'bottom')`.\n     * @param message {string}\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    showLongBottom(message: string): Observable<any> {\n        return Observable.create( (observer: Observer<any>) => {\n            observer.next('');\n            observer.complete();\n        });\n    };\n}\n"]}