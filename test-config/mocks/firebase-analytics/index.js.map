{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/firebase-analytics/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,kCAAkC,CAAC;AAErE;IAA4C,0CAAiB;IAA7D;;IAyDA,CAAC;IAxDG;;;;;;OAMG;IACH,yCAAQ,GAAR,UAAS,IAAY,EAAE,MAAW;QAC9B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,0CAAS,GAAT,UAAU,EAAU;QAChB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,gDAAe,GAAf,UAAgB,IAAY,EAAE,KAAa;QACvC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,2CAAU,GAAV,UAAW,OAAgB;QACvB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,iDAAgB,GAAhB,UAAiB,IAAY;QACzB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,6BAAC;AAAD,CAzDA,AAyDC,CAzD2C,iBAAiB,GAyD5D","file":"index.js","sourceRoot":"","sourcesContent":["import { FirebaseAnalytics } from '@ionic-native/firebase-analytics';\n\nexport class FirebaseAnalyticsMocks extends FirebaseAnalytics {\n    /**\n     * Logs an app event.\n     * Be aware of automatically collected events.\n     * @param name {string} The name of the event\n     * @param params {any} Some param to configure something\n     * @return {Promise<any>} Returns a promise\n     */\n    logEvent(name: string, params: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Sets the user ID property.\n     * This feature must be used in accordance with Google's Privacy Policy.\n     * @param id {string} The user ID\n     * @return {Promise<any>} Returns a promise\n     */\n    setUserId(id: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * This feature must be used in accordance with Google's Privacy Policy.\n     * Be aware of automatically collected user properties.\n     * @param name {string} The property name\n     * @param value {string} The property value\n     * @return {Promise<any>} Returns a promise\n     */\n    setUserProperty(name: string, value: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Sets whether analytics collection is enabled for this app on this device.\n     * @param enabled {boolean}\n     * @return {Promise<any>} Returns a promise\n     */\n    setEnabled(enabled: boolean): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Sets the current screen name, which specifies the current visual context in your app.\n     * This helps identify the areas in your app where users spend their time and how they interact with your app.\n     * @param name {string} The name of the screen\n     * @return {Promise<any>} Returns a promise\n     */\n    setCurrentScreen(name: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n}\n"]}