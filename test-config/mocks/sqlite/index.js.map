{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/sqlite/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAqE9C;IAAgC,8BAAM;IAAtC;;IAmCA,CAAC;IAlCG;;;;;;;OAOG;IACH,2BAAM,GAAN,UAAO,MAA4B;QAC/B,IAAI,SAAuB,CAAC;QAC5B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,SAAS,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,6BAAQ,GAAR;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,mCAAc,GAAd,UAAgB,MAA4B;QACxC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IAEN,iBAAC;AAAD,CAnCA,AAmCC,CAnC+B,MAAM,GAmCrC","file":"index.js","sourceRoot":"","sourcesContent":["import { SQLite } from '@ionic-native/sqlite';\n\nexport interface SQLiteDatabaseConfig {\n    /**\n     * Name of the database. Example: 'my.db'\n     */\n    name: string;\n    /**\n     * Location of the database. Example: 'default'\n     */\n    location?: string;\n    /**\n     * iOS Database Location. Example: 'Library'\n     */\n    iosDatabaseLocation?: string;\n}\n\nexport declare class SQLiteObject {\n    _objectInstance: any;\n    constructor(_objectInstance: any);\n    databaseFeatures: {\n        isSQLitePluginDatabase: boolean;\n    };\n    openDBs: any;\n    addTransaction(transaction: (tx: SQLiteTransaction) => void): void;\n    /**\n     * @param fn {any}\n     * @returns {Promise<any>}\n     */\n    transaction(fn: any): Promise<any>;\n    /**\n     * @param fn {Function}\n     * @returns {Promise<any>}\n     */\n    readTransaction(fn: (tx: SQLiteTransaction) => void): Promise<any>;\n    startNextTransaction(): void;\n    /**\n     * @returns {Promise<any>}\n     */\n    open(): Promise<any>;\n    /**\n     * @returns {Promise<any>}\n     */\n    close(): Promise<any>;\n    /**\n     * Execute SQL on the opened database. Note, you must call `create` first, and\n     * ensure it resolved and successfully opened the database.\n     */\n    executeSql(statement: string, params: any): Promise<any>;\n    /**\n     * @param sqlStatements {Array<string | string[]>}\n     * @returns {Promise<any>}\n     */\n    sqlBatch(sqlStatements: Array<string | string[]>): Promise<any>;\n    abortallPendingTransactions(): void;\n}\n\nexport interface SQLiteTransaction {\n    start: () => void;\n    executeSql: (sql: any, values: any, success: Function, error: Function) => void;\n    addStatement: (sql: any, values: any, success: Function, error: Function) => void;\n    handleStatementSuccess: (handler: Function, response: any) => void;\n    handleStatementFailure: (handler: Function, response: any) => void;\n    run: () => void;\n    abort: (txFailure: any) => void;\n    finish: () => void;\n    abortFromQ: (sqlerror: any) => void;\n}\n\nexport class SQLiteMock extends SQLite {\n    /**\n     * Open or create a SQLite database file.\n     *\n     * See the plugin docs for an explanation of all options: https://github.com/litehelpers/Cordova-sqlite-storage#opening-a-database\n     *\n     * @param config {SQLiteDatabaseConfig} database configuration\n     * @return Promise<SQLiteObject>\n     */\n    create(config: SQLiteDatabaseConfig): Promise<SQLiteObject> {\n        let theResult: SQLiteObject;\n        return new Promise((resolve, reject) => {\n            resolve(theResult);\n        });\n    };\n    /**\n     * Verify that both the Javascript and native part of this plugin are installed in your application\n     * @returns {Promise<any>}\n     */\n    echoTest(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Deletes a database\n     * @param config {SQLiteDatabaseConfig} database configuration\n     * @returns {Promise<any>}\n     */\n    deleteDatabase (config: SQLiteDatabaseConfig): Promise<any> {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n\n}\n"]}