{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/qqsdk/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AA0C5C;IAA+B,6BAAK;IAApC;;IAiFA,CAAC;IAjEG;;;;OAIG;IACH,4BAAQ,GAAR,UAAS,OAAuB;QAC3B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF,0BAAM,GAAN;QACK,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,wCAAoB,GAApB,UAAqB,OAAuB;QACvC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,6BAAS,GAAT,UAAU,OAAuB;QAC5B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,8BAAU,GAAV,UAAW,OAAuB;QAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,6BAAS,GAAT,UAAU,OAAuB;QAC5B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,8BAAU,GAAV,UAAW,OAAuB;QAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAChC,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,gBAAC;AAAD,CAjFA,AAiFC,CAjF8B,KAAK,GAiFnC","file":"index.js","sourceRoot":"","sourcesContent":["import { QQSDK } from '@ionic-native/qqsdk';\nexport interface QQShareOptions {\n    /**\n     * The clinet type, QQ or TIM\n     * Default is QQ\n     */\n    client?: number;\n    /**\n     * The Share Sence\n     * Default is QQ\n     */\n    scene?: number;\n    /**\n     * The text for shareText\n     */\n    text?: string;\n    /**\n     * The url for share news or audio\n     */\n    url?: string;\n    /**\n     * The title for share image,news or audio\n     */\n    title?: string;\n    /**\n     * The description for share image,news or audio\n     */\n    description?: string;\n    /**\n     * The image for share image,news or audio\n     * Image supports three types:\n     * 1. Network URL\n     * 2. Base64\n     * 3. Absolute file path\n     */\n    image?: string;\n    /**\n     *  The URL for audio\n     */\n    flashUrl?: string;\n}\n\nexport class QQSDKMock extends QQSDK {\n    /**\n     * QQ Share Scene\n     */\n    Scene: {\n        QQ: number;\n        QQZone: number;\n        Favorite: number;\n    };\n    /**\n     *  client type:  QQ application or TIM application\n     */\n    ClientType: {\n        QQ: number;\n        TIM: number;\n    };\n    /**\n     * open QQ or TIM client perform ssoLogin\n     * @param options\n     * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.\n     */\n    ssoLogin(options: QQShareOptions): Promise<any> {\n         return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    logout(): Promise<any> {\n         return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * Detect if the QQ application or TIM application is installed on the device.\n     *\n     * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.\n     */\n    checkClientInstalled(options: QQShareOptions): Promise<any> {\n         return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * shareText\n     * @param options\n     * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.\n     */\n    shareText(options: QQShareOptions): Promise<any> {\n         return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * shareImage\n     * @param options\n     * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.\n     */\n    shareImage(options: QQShareOptions): Promise<any> {\n         return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * shareNews\n     * @param options\n     * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.\n     */\n    shareNews(options: QQShareOptions): Promise<any> {\n         return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n    /**\n     * shareAudio\n     * @param options\n     * @returns {Promise<any>} Returns a Promise that resolves with the success return, or rejects with an error.\n     */\n    shareAudio(options: QQShareOptions): Promise<any> {\n         return new Promise((resolve, reject) => {\n            resolve();\n        });\n    };\n}\n"]}